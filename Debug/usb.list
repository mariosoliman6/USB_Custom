
usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b70  08009b70  000201ac  2**0
                  CONTENTS
  4 .ARM          00000000  08009b70  08009b70  000201ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b70  08009b70  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b74  08009b74  00019b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  08009b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c0  200001ac  08009d24  000201ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b6c  08009d24  00021b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017575  00000000  00000000  000201d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ae  00000000  00000000  0003774a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b41f  00000000  00000000  0003d620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001838c  00000000  00000000  00058a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa2e  00000000  00000000  00070dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001007f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f44  00000000  00000000  0010084c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ac 	.word	0x200001ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08009ae4 	.word	0x08009ae4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001b0 	.word	0x200001b0
 8000148:	08009ae4 	.word	0x08009ae4

0800014c <SbW_Protocol_Reply>:
uint8_t TxBuffer[TxRxBufferSize];
uint8_t RxBuffer[TxRxBufferSize];

extern DataFrame F;

void SbW_Protocol_Reply(uint8_t *data, uint16_t len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart1, data, len);
 8000158:	887b      	ldrh	r3, [r7, #2]
 800015a:	461a      	mov	r2, r3
 800015c:	6879      	ldr	r1, [r7, #4]
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <SbW_Protocol_Reply+0x20>)
 8000160:	f003 ffbe 	bl	80040e0 <HAL_UART_Transmit_DMA>
}
 8000164:	bf00      	nop
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000410 	.word	0x20000410

08000170 <HAL_UARTEx_RxEventCallback>:

//when data is recieved from the PC
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	460b      	mov	r3, r1
 800017a:	807b      	strh	r3, [r7, #2]
	SbW_Request_Received_CB(&S, RxBuffer, Size);
 800017c:	887b      	ldrh	r3, [r7, #2]
 800017e:	461a      	mov	r2, r3
 8000180:	4906      	ldr	r1, [pc, #24]	; (800019c <HAL_UARTEx_RxEventCallback+0x2c>)
 8000182:	4807      	ldr	r0, [pc, #28]	; (80001a0 <HAL_UARTEx_RxEventCallback+0x30>)
 8000184:	f007 fb40 	bl	8007808 <SbW_Request_Received_CB>
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuffer, sizeof(RxBuffer));
 8000188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800018c:	4903      	ldr	r1, [pc, #12]	; (800019c <HAL_UARTEx_RxEventCallback+0x2c>)
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f004 f816 	bl	80041c0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000194:	bf00      	nop
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	200002c8 	.word	0x200002c8
 80001a0:	20000000 	.word	0x20000000

080001a4 <App_User_Callback>:

//to notify the application layer
void App_User_Callback(SbW_Err_Codes_t Error_Code) {
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
}
 80001ae:	bf00      	nop
 80001b0:	370c      	adds	r7, #12
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <HAL_TIM_PeriodElapsedCallback>:

//sampling timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	F.G[0]++;
 80001c0:	4b06      	ldr	r3, [pc, #24]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80001c2:	7d1b      	ldrb	r3, [r3, #20]
 80001c4:	3301      	adds	r3, #1
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80001ca:	751a      	strb	r2, [r3, #20]
	SbW_Timer_Callback(&S);
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80001ce:	f007 fc19 	bl	8007a04 <SbW_Timer_Callback>
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	200004e0 	.word	0x200004e0
 80001e0:	20000000 	.word	0x20000000

080001e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	//notify the driver about the completion of a frame transmission
	SbW_TxCPLt(&S);
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <HAL_UART_TxCpltCallback+0x18>)
 80001ee:	f007 fc75 	bl	8007adc <SbW_TxCPLt>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000000 	.word	0x20000000

08000200 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000204:	f000 fb6c 	bl	80008e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000208:	f000 f820 	bl	800024c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800020c:	f000 f918 	bl	8000440 <MX_GPIO_Init>
	MX_DMA_Init();
 8000210:	f000 f8f0 	bl	80003f4 <MX_DMA_Init>
	MX_USB_DEVICE_Init();
 8000214:	f008 ffae 	bl	8009174 <MX_USB_DEVICE_Init>
	MX_USART1_UART_Init();
 8000218:	f000 f8c2 	bl	80003a0 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 800021c:	f000 f870 	bl	8000300 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuffer, TxRxBufferSize);
 8000220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000224:	4905      	ldr	r1, [pc, #20]	; (800023c <main+0x3c>)
 8000226:	4806      	ldr	r0, [pc, #24]	; (8000240 <main+0x40>)
 8000228:	f003 ffca 	bl	80041c0 <HAL_UARTEx_ReceiveToIdle_DMA>
	SbW_Init(&S);
 800022c:	4805      	ldr	r0, [pc, #20]	; (8000244 <main+0x44>)
 800022e:	f007 fad0 	bl	80077d2 <SbW_Init>
	HAL_TIM_Base_Start_IT(&htim1);
 8000232:	4805      	ldr	r0, [pc, #20]	; (8000248 <main+0x48>)
 8000234:	f003 fb62 	bl	80038fc <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000238:	e7fe      	b.n	8000238 <main+0x38>
 800023a:	bf00      	nop
 800023c:	200002c8 	.word	0x200002c8
 8000240:	20000410 	.word	0x20000410
 8000244:	20000000 	.word	0x20000000
 8000248:	200003c8 	.word	0x200003c8

0800024c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	; 0x50
 8000250:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f009 fc3a 	bl	8009ad4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000296:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800029e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 fe14 	bl	8002ed0 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x66>
		Error_Handler();
 80002ae:	f000 f8e9 	bl	8000484 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002c8:	f107 0314 	add.w	r3, r7, #20
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 f880 	bl	80033d4 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x92>
		Error_Handler();
 80002da:	f000 f8d3 	bl	8000484 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002de:	2310      	movs	r3, #16
 80002e0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002e2:	2300      	movs	r3, #0
 80002e4:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f003 fa01 	bl	80036f0 <HAL_RCCEx_PeriphCLKConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0xac>
		Error_Handler();
 80002f4:	f000 f8c6 	bl	8000484 <Error_Handler>
	}
}
 80002f8:	bf00      	nop
 80002fa:	3750      	adds	r7, #80	; 0x50
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000314:	463b      	mov	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800031c:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <MX_TIM1_Init+0x98>)
 800031e:	4a1f      	ldr	r2, [pc, #124]	; (800039c <MX_TIM1_Init+0x9c>)
 8000320:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <MX_TIM1_Init+0x98>)
 8000324:	2247      	movs	r2, #71	; 0x47
 8000326:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_TIM1_Init+0x98>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_TIM1_Init+0x98>)
 8000330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000334:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_TIM1_Init+0x98>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_TIM1_Init+0x98>)
 800033e:	2200      	movs	r2, #0
 8000340:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_TIM1_Init+0x98>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000348:	4813      	ldr	r0, [pc, #76]	; (8000398 <MX_TIM1_Init+0x98>)
 800034a:	f003 fa87 	bl	800385c <HAL_TIM_Base_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM1_Init+0x58>
		Error_Handler();
 8000354:	f000 f896 	bl	8000484 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4619      	mov	r1, r3
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_TIM1_Init+0x98>)
 8000366:	f003 fc0b 	bl	8003b80 <HAL_TIM_ConfigClockSource>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000370:	f000 f888 	bl	8000484 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000374:	2300      	movs	r3, #0
 8000376:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800037c:	463b      	mov	r3, r7
 800037e:	4619      	mov	r1, r3
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_TIM1_Init+0x98>)
 8000382:	f003 fded 	bl	8003f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800038c:	f000 f87a 	bl	8000484 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	3718      	adds	r7, #24
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200003c8 	.word	0x200003c8
 800039c:	40012c00 	.word	0x40012c00

080003a0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <MX_USART1_UART_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 256000;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ac:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80003b0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d8:	f003 fe32 	bl	8004040 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80003e2:	f000 f84f 	bl	8000484 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000410 	.word	0x20000410
 80003f0:	40013800 	.word	0x40013800

080003f4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_DMA_Init+0x48>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a0f      	ldr	r2, [pc, #60]	; (800043c <MX_DMA_Init+0x48>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6153      	str	r3, [r2, #20]
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <MX_DMA_Init+0x48>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	2100      	movs	r1, #0
 8000416:	200e      	movs	r0, #14
 8000418:	f000 fb9b 	bl	8000b52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800041c:	200e      	movs	r0, #14
 800041e:	f000 fbb4 	bl	8000b8a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	200f      	movs	r0, #15
 8000428:	f000 fb93 	bl	8000b52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800042c:	200f      	movs	r0, #15
 800042e:	f000 fbac 	bl	8000b8a <HAL_NVIC_EnableIRQ>

}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_GPIO_Init+0x40>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <MX_GPIO_Init+0x40>)
 800044c:	f043 0320 	orr.w	r3, r3, #32
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_GPIO_Init+0x40>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0320 	and.w	r3, r3, #32
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_GPIO_Init+0x40>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a07      	ldr	r2, [pc, #28]	; (8000480 <MX_GPIO_Init+0x40>)
 8000464:	f043 0304 	orr.w	r3, r3, #4
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <MX_GPIO_Init+0x40>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0304 	and.w	r3, r3, #4
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000

08000484 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800048c:	e7fe      	b.n	800048c <Error_Handler+0x8>
	...

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a14      	ldr	r2, [pc, #80]	; (80004ec <HAL_MspInit+0x5c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <HAL_MspInit+0x5c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x5c>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x5c>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <HAL_MspInit+0x60>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <HAL_MspInit+0x60>)
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010000 	.word	0x40010000

080004f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <HAL_TIM_Base_MspInit+0x44>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d113      	bne.n	800052e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <HAL_TIM_Base_MspInit+0x48>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a0c      	ldr	r2, [pc, #48]	; (800053c <HAL_TIM_Base_MspInit+0x48>)
 800050c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <HAL_TIM_Base_MspInit+0x48>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2019      	movs	r0, #25
 8000524:	f000 fb15 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000528:	2019      	movs	r0, #25
 800052a:	f000 fb2e 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40012c00 	.word	0x40012c00
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a47      	ldr	r2, [pc, #284]	; (8000678 <HAL_UART_MspInit+0x138>)
 800055c:	4293      	cmp	r3, r2
 800055e:	f040 8086 	bne.w	800066e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000562:	4b46      	ldr	r3, [pc, #280]	; (800067c <HAL_UART_MspInit+0x13c>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a45      	ldr	r2, [pc, #276]	; (800067c <HAL_UART_MspInit+0x13c>)
 8000568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b43      	ldr	r3, [pc, #268]	; (800067c <HAL_UART_MspInit+0x13c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b40      	ldr	r3, [pc, #256]	; (800067c <HAL_UART_MspInit+0x13c>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a3f      	ldr	r2, [pc, #252]	; (800067c <HAL_UART_MspInit+0x13c>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <HAL_UART_MspInit+0x13c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000598:	2302      	movs	r3, #2
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4836      	ldr	r0, [pc, #216]	; (8000680 <HAL_UART_MspInit+0x140>)
 80005a8:	f000 fdac 	bl	8001104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	482f      	ldr	r0, [pc, #188]	; (8000680 <HAL_UART_MspInit+0x140>)
 80005c2:	f000 fd9f 	bl	8001104 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80005c6:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005c8:	4a2f      	ldr	r2, [pc, #188]	; (8000688 <HAL_UART_MspInit+0x148>)
 80005ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005d8:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005f6:	4823      	ldr	r0, [pc, #140]	; (8000684 <HAL_UART_MspInit+0x144>)
 80005f8:	f000 fae2 	bl	8000bc0 <HAL_DMA_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000602:	f7ff ff3f 	bl	8000484 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <HAL_UART_MspInit+0x144>)
 800060a:	63da      	str	r2, [r3, #60]	; 0x3c
 800060c:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <HAL_UART_MspInit+0x144>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <HAL_UART_MspInit+0x14c>)
 8000614:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <HAL_UART_MspInit+0x150>)
 8000616:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_UART_MspInit+0x14c>)
 800061a:	2210      	movs	r2, #16
 800061c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_UART_MspInit+0x14c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <HAL_UART_MspInit+0x14c>)
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_UART_MspInit+0x14c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <HAL_UART_MspInit+0x14c>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_UART_MspInit+0x14c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_UART_MspInit+0x14c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000642:	4812      	ldr	r0, [pc, #72]	; (800068c <HAL_UART_MspInit+0x14c>)
 8000644:	f000 fabc 	bl	8000bc0 <HAL_DMA_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800064e:	f7ff ff19 	bl	8000484 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <HAL_UART_MspInit+0x14c>)
 8000656:	639a      	str	r2, [r3, #56]	; 0x38
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <HAL_UART_MspInit+0x14c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	2025      	movs	r0, #37	; 0x25
 8000664:	f000 fa75 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000668:	2025      	movs	r0, #37	; 0x25
 800066a:	f000 fa8e 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800066e:	bf00      	nop
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40013800 	.word	0x40013800
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800
 8000684:	20000458 	.word	0x20000458
 8000688:	40020058 	.word	0x40020058
 800068c:	2000049c 	.word	0x2000049c
 8000690:	40020044 	.word	0x40020044

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006da:	f000 f947 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <DMA1_Channel4_IRQHandler+0x10>)
 80006ea:	f000 fbd7 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000049c 	.word	0x2000049c

080006f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <DMA1_Channel5_IRQHandler+0x10>)
 80006fe:	f000 fbcd 	bl	8000e9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000458 	.word	0x20000458

0800070c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000712:	f000 ff97 	bl	8001644 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20001674 	.word	0x20001674

08000720 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000726:	f000 ff8d 	bl	8001644 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20001674 	.word	0x20001674

08000734 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <TIM1_UP_IRQHandler+0x10>)
 800073a:	f003 f931 	bl	80039a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200003c8 	.word	0x200003c8

08000748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <USART1_IRQHandler+0x10>)
 800074e:	f003 fd91 	bl	8004274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000410 	.word	0x20000410

0800075c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000768:	f7ff fff8 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800076e:	490c      	ldr	r1, [pc, #48]	; (80007a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000784:	4c09      	ldr	r4, [pc, #36]	; (80007ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000792:	f009 f96d 	bl	8009a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fd33 	bl	8000200 <main>
  bx lr
 800079a:	4770      	bx	lr
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 80007a4:	08009b78 	.word	0x08009b78
  ldr r2, =_sbss
 80007a8:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 80007ac:	20001b6c 	.word	0x20001b6c

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>

080007b2 <fifo_init>:
#include "FIFO.h"
// Initialize the FIFO
void fifo_init(fifo_T *f)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	f->head = f->UserHead = -1;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c0:	811a      	strh	r2, [r3, #8]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	801a      	strh	r2, [r3, #0]
	f->tail = f->UserTail = 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	815a      	strh	r2, [r3, #10]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	805a      	strh	r2, [r3, #2]
	f->count = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	809a      	strh	r2, [r3, #4]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <fifo_is_empty>:

// Check if the FIFO is empty
int8_t fifo_is_empty(const fifo_T *f)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return (f->count == 0);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf0c      	ite	eq
 80007fc:	2301      	moveq	r3, #1
 80007fe:	2300      	movne	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	b25b      	sxtb	r3, r3
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <fifo_enqueue>:
// Enqueue data into the FIFO (overwrite oldest data if full)
int16_t fifo_enqueue(fifo_T *f)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	f->head = (f->head + 1) % f->Fifo_Size; // Circular wrap-around
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800081c:	3301      	adds	r3, #1
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	88d2      	ldrh	r2, [r2, #6]
 8000822:	fb93 f1f2 	sdiv	r1, r3, r2
 8000826:	fb01 f202 	mul.w	r2, r1, r2
 800082a:	1a9b      	subs	r3, r3, r2
 800082c:	b21a      	sxth	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	801a      	strh	r2, [r3, #0]
	f->UserHead = f->head;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	811a      	strh	r2, [r3, #8]

	if (f->count == f->Fifo_Size)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	889a      	ldrh	r2, [r3, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	88db      	ldrh	r3, [r3, #6]
 8000844:	429a      	cmp	r2, r3
 8000846:	d10e      	bne.n	8000866 <fifo_enqueue+0x58>
	{
		// FIFO is full → Overwrite → Move tail forward
		f->tail = (f->tail + 1) % f->Fifo_Size;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800084e:	3301      	adds	r3, #1
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	88d2      	ldrh	r2, [r2, #6]
 8000854:	fb93 f1f2 	sdiv	r1, r3, r2
 8000858:	fb01 f202 	mul.w	r2, r1, r2
 800085c:	1a9b      	subs	r3, r3, r2
 800085e:	b21a      	sxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	805a      	strh	r2, [r3, #2]
 8000864:	e005      	b.n	8000872 <fifo_enqueue+0x64>
	}
	else
	{
		f->count++;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	889b      	ldrh	r3, [r3, #4]
 800086a:	3301      	adds	r3, #1
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	809a      	strh	r2, [r3, #4]
	}
	return f->UserHead;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <fifo_dequeue>:

// Dequeue data from the FIFO
// Returns 0 on success, -1 if FIFO is empty
int16_t fifo_dequeue(fifo_T *f)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(f))
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffae 	bl	80007ec <fifo_is_empty>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d119      	bne.n	80008ca <fifo_dequeue+0x48>
	{
		f->UserTail = f->tail;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	815a      	strh	r2, [r3, #10]
		f->count--;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	889b      	ldrh	r3, [r3, #4]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	809a      	strh	r2, [r3, #4]
		f->tail = (f->tail + 1) % f->Fifo_Size; // Circular wrap-around
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008b2:	3301      	adds	r3, #1
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	88d2      	ldrh	r2, [r2, #6]
 80008b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80008bc:	fb01 f202 	mul.w	r2, r1, r2
 80008c0:	1a9b      	subs	r3, r3, r2
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	805a      	strh	r2, [r3, #2]
 80008c8:	e003      	b.n	80008d2 <fifo_dequeue+0x50>
	}
	else
	{
		f->UserTail = -1;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d0:	815a      	strh	r2, [r3, #10]
	}
	return f->UserTail;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_Init+0x28>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_Init+0x28>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f923 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fdc8 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f93b 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f903 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000030 	.word	0x20000030
 8000964:	20000038 	.word	0x20000038
 8000968:	20000034 	.word	0x20000034

0800096c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_IncTick+0x1c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_IncTick+0x20>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <HAL_IncTick+0x20>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000038 	.word	0x20000038
 800098c:	200009a8 	.word	0x200009a8

08000990 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b02      	ldr	r3, [pc, #8]	; (80009a0 <HAL_GetTick+0x10>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	200009a8 	.word	0x200009a8

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4906      	ldr	r1, [pc, #24]	; (8000a3c <__NVIC_EnableIRQ+0x34>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	; 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff90 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff2d 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff42 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff90 	bl	8000a94 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5f 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff35 	bl	8000a08 <__NVIC_EnableIRQ>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa2 	bl	8000af8 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e043      	b.n	8000c5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <HAL_DMA_Init+0xa8>)
 8000bde:	4413      	add	r3, r2
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <HAL_DMA_Init+0xac>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	009a      	lsls	r2, r3, #2
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <HAL_DMA_Init+0xb0>)
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	bffdfff8 	.word	0xbffdfff8
 8000c6c:	cccccccd 	.word	0xcccccccd
 8000c70:	40020000 	.word	0x40020000

08000c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d101      	bne.n	8000c94 <HAL_DMA_Start_IT+0x20>
 8000c90:	2302      	movs	r3, #2
 8000c92:	e04b      	b.n	8000d2c <HAL_DMA_Start_IT+0xb8>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d13a      	bne.n	8000d1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2202      	movs	r2, #2
 8000cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0201 	bic.w	r2, r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f000 f9eb 	bl	80010a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d008      	beq.n	8000cec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f042 020e 	orr.w	r2, r2, #14
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	e00f      	b.n	8000d0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 0204 	bic.w	r2, r2, #4
 8000cfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 020a 	orr.w	r2, r2, #10
 8000d0a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0201 	orr.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e005      	b.n	8000d2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d26:	2302      	movs	r3, #2
 8000d28:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d008      	beq.n	8000d5e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e020      	b.n	8000da0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 020e 	bic.w	r2, r2, #14
 8000d6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0201 	bic.w	r2, r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d005      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e051      	b.n	8000e74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 020e 	bic.w	r2, r2, #14
 8000dde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <HAL_DMA_Abort_IT+0xd4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d029      	beq.n	8000e4e <HAL_DMA_Abort_IT+0xa2>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <HAL_DMA_Abort_IT+0xd8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d022      	beq.n	8000e4a <HAL_DMA_Abort_IT+0x9e>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_DMA_Abort_IT+0xdc>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01a      	beq.n	8000e44 <HAL_DMA_Abort_IT+0x98>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <HAL_DMA_Abort_IT+0xe0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d012      	beq.n	8000e3e <HAL_DMA_Abort_IT+0x92>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_DMA_Abort_IT+0xe4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00a      	beq.n	8000e38 <HAL_DMA_Abort_IT+0x8c>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <HAL_DMA_Abort_IT+0xe8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d102      	bne.n	8000e32 <HAL_DMA_Abort_IT+0x86>
 8000e2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e30:	e00e      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e36:	e00b      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3c:	e008      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	e005      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e48:	e002      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	e000      	b.n	8000e50 <HAL_DMA_Abort_IT+0xa4>
 8000e4e:	2301      	movs	r3, #1
 8000e50:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <HAL_DMA_Abort_IT+0xec>)
 8000e52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	4798      	blx	r3
    } 
  }
  return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40020008 	.word	0x40020008
 8000e84:	4002001c 	.word	0x4002001c
 8000e88:	40020030 	.word	0x40020030
 8000e8c:	40020044 	.word	0x40020044
 8000e90:	40020058 	.word	0x40020058
 8000e94:	4002006c 	.word	0x4002006c
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2204      	movs	r2, #4
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d04f      	beq.n	8000f64 <HAL_DMA_IRQHandler+0xc8>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d04a      	beq.n	8000f64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0204 	bic.w	r2, r2, #4
 8000eea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a66      	ldr	r2, [pc, #408]	; (800108c <HAL_DMA_IRQHandler+0x1f0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d029      	beq.n	8000f4a <HAL_DMA_IRQHandler+0xae>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a65      	ldr	r2, [pc, #404]	; (8001090 <HAL_DMA_IRQHandler+0x1f4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d022      	beq.n	8000f46 <HAL_DMA_IRQHandler+0xaa>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a63      	ldr	r2, [pc, #396]	; (8001094 <HAL_DMA_IRQHandler+0x1f8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01a      	beq.n	8000f40 <HAL_DMA_IRQHandler+0xa4>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a62      	ldr	r2, [pc, #392]	; (8001098 <HAL_DMA_IRQHandler+0x1fc>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d012      	beq.n	8000f3a <HAL_DMA_IRQHandler+0x9e>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a60      	ldr	r2, [pc, #384]	; (800109c <HAL_DMA_IRQHandler+0x200>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00a      	beq.n	8000f34 <HAL_DMA_IRQHandler+0x98>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a5f      	ldr	r2, [pc, #380]	; (80010a0 <HAL_DMA_IRQHandler+0x204>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <HAL_DMA_IRQHandler+0x92>
 8000f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2c:	e00e      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f32:	e00b      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f38:	e008      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f3e:	e005      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f44:	e002      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	e000      	b.n	8000f4c <HAL_DMA_IRQHandler+0xb0>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	4a55      	ldr	r2, [pc, #340]	; (80010a4 <HAL_DMA_IRQHandler+0x208>)
 8000f4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 8094 	beq.w	8001082 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f62:	e08e      	b.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	2202      	movs	r2, #2
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d056      	beq.n	8001022 <HAL_DMA_IRQHandler+0x186>
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d051      	beq.n	8001022 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10b      	bne.n	8000fa4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 020a 	bic.w	r2, r2, #10
 8000f9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a38      	ldr	r2, [pc, #224]	; (800108c <HAL_DMA_IRQHandler+0x1f0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d029      	beq.n	8001002 <HAL_DMA_IRQHandler+0x166>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a37      	ldr	r2, [pc, #220]	; (8001090 <HAL_DMA_IRQHandler+0x1f4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d022      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x162>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a35      	ldr	r2, [pc, #212]	; (8001094 <HAL_DMA_IRQHandler+0x1f8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d01a      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x15c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a34      	ldr	r2, [pc, #208]	; (8001098 <HAL_DMA_IRQHandler+0x1fc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d012      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x156>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a32      	ldr	r2, [pc, #200]	; (800109c <HAL_DMA_IRQHandler+0x200>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00a      	beq.n	8000fec <HAL_DMA_IRQHandler+0x150>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <HAL_DMA_IRQHandler+0x204>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d102      	bne.n	8000fe6 <HAL_DMA_IRQHandler+0x14a>
 8000fe0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fe4:	e00e      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fea:	e00b      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff0:	e008      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff6:	e005      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffc:	e002      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8000ffe:	2320      	movs	r3, #32
 8001000:	e000      	b.n	8001004 <HAL_DMA_IRQHandler+0x168>
 8001002:	2302      	movs	r3, #2
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_DMA_IRQHandler+0x208>)
 8001006:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	2b00      	cmp	r3, #0
 8001016:	d034      	beq.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001020:	e02f      	b.n	8001082 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	2208      	movs	r2, #8
 8001028:	409a      	lsls	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d028      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	2b00      	cmp	r3, #0
 800103a:	d023      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 020e 	bic.w	r2, r2, #14
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	4798      	blx	r3
    }
  }
  return;
 8001082:	bf00      	nop
 8001084:	bf00      	nop
}
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020008 	.word	0x40020008
 8001090:	4002001c 	.word	0x4002001c
 8001094:	40020030 	.word	0x40020030
 8001098:	40020044 	.word	0x40020044
 800109c:	40020058 	.word	0x40020058
 80010a0:	4002006c 	.word	0x4002006c
 80010a4:	40020000 	.word	0x40020000

080010a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b10      	cmp	r3, #16
 80010d4:	d108      	bne.n	80010e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010e6:	e007      	b.n	80010f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b08b      	sub	sp, #44	; 0x2c
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e169      	b.n	80013ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001118:	2201      	movs	r2, #1
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8158 	bne.w	80013e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a9a      	ldr	r2, [pc, #616]	; (80013a4 <HAL_GPIO_Init+0x2a0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d05e      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001140:	4a98      	ldr	r2, [pc, #608]	; (80013a4 <HAL_GPIO_Init+0x2a0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d875      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001146:	4a98      	ldr	r2, [pc, #608]	; (80013a8 <HAL_GPIO_Init+0x2a4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d058      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 800114c:	4a96      	ldr	r2, [pc, #600]	; (80013a8 <HAL_GPIO_Init+0x2a4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d86f      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001152:	4a96      	ldr	r2, [pc, #600]	; (80013ac <HAL_GPIO_Init+0x2a8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d052      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001158:	4a94      	ldr	r2, [pc, #592]	; (80013ac <HAL_GPIO_Init+0x2a8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d869      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800115e:	4a94      	ldr	r2, [pc, #592]	; (80013b0 <HAL_GPIO_Init+0x2ac>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d04c      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001164:	4a92      	ldr	r2, [pc, #584]	; (80013b0 <HAL_GPIO_Init+0x2ac>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d863      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800116a:	4a92      	ldr	r2, [pc, #584]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d046      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
 8001170:	4a90      	ldr	r2, [pc, #576]	; (80013b4 <HAL_GPIO_Init+0x2b0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d85d      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 8001176:	2b12      	cmp	r3, #18
 8001178:	d82a      	bhi.n	80011d0 <HAL_GPIO_Init+0xcc>
 800117a:	2b12      	cmp	r3, #18
 800117c:	d859      	bhi.n	8001232 <HAL_GPIO_Init+0x12e>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <HAL_GPIO_Init+0x80>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	080011ff 	.word	0x080011ff
 8001188:	080011d9 	.word	0x080011d9
 800118c:	080011eb 	.word	0x080011eb
 8001190:	0800122d 	.word	0x0800122d
 8001194:	08001233 	.word	0x08001233
 8001198:	08001233 	.word	0x08001233
 800119c:	08001233 	.word	0x08001233
 80011a0:	08001233 	.word	0x08001233
 80011a4:	08001233 	.word	0x08001233
 80011a8:	08001233 	.word	0x08001233
 80011ac:	08001233 	.word	0x08001233
 80011b0:	08001233 	.word	0x08001233
 80011b4:	08001233 	.word	0x08001233
 80011b8:	08001233 	.word	0x08001233
 80011bc:	08001233 	.word	0x08001233
 80011c0:	08001233 	.word	0x08001233
 80011c4:	08001233 	.word	0x08001233
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	080011f5 	.word	0x080011f5
 80011d0:	4a79      	ldr	r2, [pc, #484]	; (80013b8 <HAL_GPIO_Init+0x2b4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011d6:	e02c      	b.n	8001232 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e029      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	623b      	str	r3, [r7, #32]
          break;
 80011e8:	e024      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e01f      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	330c      	adds	r3, #12
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e01a      	b.n	8001234 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001206:	2304      	movs	r3, #4
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e013      	b.n	8001234 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001214:	2308      	movs	r3, #8
 8001216:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	611a      	str	r2, [r3, #16]
          break;
 800121e:	e009      	b.n	8001234 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	615a      	str	r2, [r3, #20]
          break;
 800122a:	e003      	b.n	8001234 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x130>
          break;
 8001232:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	; 0xff
 8001238:	d801      	bhi.n	800123e <HAL_GPIO_Init+0x13a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_Init+0x13e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3304      	adds	r3, #4
 8001242:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2bff      	cmp	r3, #255	; 0xff
 8001248:	d802      	bhi.n	8001250 <HAL_GPIO_Init+0x14c>
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x152>
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3b08      	subs	r3, #8
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	210f      	movs	r1, #15
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	6a39      	ldr	r1, [r7, #32]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	431a      	orrs	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80b1 	beq.w	80013e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001284:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <HAL_GPIO_Init+0x2b8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a4c      	ldr	r2, [pc, #304]	; (80013bc <HAL_GPIO_Init+0x2b8>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <HAL_GPIO_Init+0x2b8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800129c:	4a48      	ldr	r2, [pc, #288]	; (80013c0 <HAL_GPIO_Init+0x2bc>)
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a40      	ldr	r2, [pc, #256]	; (80013c4 <HAL_GPIO_Init+0x2c0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d013      	beq.n	80012f0 <HAL_GPIO_Init+0x1ec>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <HAL_GPIO_Init+0x2c4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d00d      	beq.n	80012ec <HAL_GPIO_Init+0x1e8>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	; (80013cc <HAL_GPIO_Init+0x2c8>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d007      	beq.n	80012e8 <HAL_GPIO_Init+0x1e4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a3d      	ldr	r2, [pc, #244]	; (80013d0 <HAL_GPIO_Init+0x2cc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d101      	bne.n	80012e4 <HAL_GPIO_Init+0x1e0>
 80012e0:	2303      	movs	r3, #3
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e004      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012f0:	2300      	movs	r3, #0
 80012f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f4:	f002 0203 	and.w	r2, r2, #3
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	4093      	lsls	r3, r2
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001302:	492f      	ldr	r1, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0x2bc>)
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	492c      	ldr	r1, [pc, #176]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	608b      	str	r3, [r1, #8]
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	43db      	mvns	r3, r3
 8001332:	4928      	ldr	r1, [pc, #160]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001334:	4013      	ands	r3, r2
 8001336:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	4922      	ldr	r1, [pc, #136]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	491e      	ldr	r1, [pc, #120]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4918      	ldr	r1, [pc, #96]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	4914      	ldr	r1, [pc, #80]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d021      	beq.n	80013d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	490e      	ldr	r1, [pc, #56]	; (80013d4 <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e021      	b.n	80013e6 <HAL_GPIO_Init+0x2e2>
 80013a2:	bf00      	nop
 80013a4:	10320000 	.word	0x10320000
 80013a8:	10310000 	.word	0x10310000
 80013ac:	10220000 	.word	0x10220000
 80013b0:	10210000 	.word	0x10210000
 80013b4:	10120000 	.word	0x10120000
 80013b8:	10110000 	.word	0x10110000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40010c00 	.word	0x40010c00
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40011400 	.word	0x40011400
 80013d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	43db      	mvns	r3, r3
 80013e0:	4909      	ldr	r1, [pc, #36]	; (8001408 <HAL_GPIO_Init+0x304>)
 80013e2:	4013      	ands	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f47f ae8e 	bne.w	8001118 <HAL_GPIO_Init+0x14>
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	372c      	adds	r7, #44	; 0x2c
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0e8      	b.n	80015f0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f008 f86a 	bl	800950c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fe2f 	bl	80050ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3304      	adds	r3, #4
 8001458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800145a:	f003 fe05 	bl	8005068 <USB_CoreInit>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0bf      	b.n	80015f0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fe33 	bl	80050e2 <USB_SetCurrentMode>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2202      	movs	r2, #2
 8001486:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0b0      	b.n	80015f0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e03e      	b.n	8001512 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	3311      	adds	r3, #17
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	3310      	adds	r3, #16
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	3313      	adds	r3, #19
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	3320      	adds	r3, #32
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3324      	adds	r3, #36	; 0x24
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	3301      	adds	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	791b      	ldrb	r3, [r3, #4]
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	429a      	cmp	r2, r3
 800151a:	d3bb      	bcc.n	8001494 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e044      	b.n	80015ac <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	3301      	adds	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	791b      	ldrb	r3, [r3, #4]
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3b5      	bcc.n	8001522 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3304      	adds	r3, #4
 80015be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c0:	f003 fd9b 	bl	80050fa <USB_DevInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00c      	b.n	80015f0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 f81a 	bl	8007622 <USB_DevDisconnect>

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_PCD_Start+0x16>
 800160a:	2302      	movs	r3, #2
 800160c:	e016      	b.n	800163c <HAL_PCD_Start+0x44>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fd31 	bl	8005082 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001620:	2101      	movs	r1, #1
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f008 f9ed 	bl	8009a02 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f005 ffee 	bl	800760e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fff0 	bl	8007636 <USB_ReadInterrupts>
 8001656:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fb1a 	bl	8001c9c <PCD_EP_ISR_Handler>

    return;
 8001668:	e119      	b.n	800189e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001686:	b292      	uxth	r2, r2
 8001688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f007 ffc0 	bl	8009612 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001692:	2100      	movs	r1, #0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f905 	bl	80018a4 <HAL_PCD_SetAddress>

    return;
 800169a:	e100      	b.n	800189e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00c      	beq.n	80016c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016b8:	b292      	uxth	r2, r2
 80016ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016be:	e0ee      	b.n	800189e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00c      	beq.n	80016e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016dc:	b292      	uxth	r2, r2
 80016de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016e2:	e0dc      	b.n	800189e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d027      	beq.n	800173e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0204 	bic.w	r2, r2, #4
 8001700:	b292      	uxth	r2, r2
 8001702:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800170e:	b29a      	uxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0208 	bic.w	r2, r2, #8
 8001718:	b292      	uxth	r2, r2
 800171a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f007 ffb0 	bl	8009684 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800172c:	b29a      	uxth	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800173c:	e0af      	b.n	800189e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8083 	beq.w	8001850 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800174a:	2300      	movs	r3, #0
 800174c:	77fb      	strb	r3, [r7, #31]
 800174e:	e010      	b.n	8001772 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	441a      	add	r2, r3
 800175c:	7ffb      	ldrb	r3, [r7, #31]
 800175e:	8812      	ldrh	r2, [r2, #0]
 8001760:	b292      	uxth	r2, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	3320      	adds	r3, #32
 8001766:	443b      	add	r3, r7
 8001768:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	3301      	adds	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	7ffb      	ldrb	r3, [r7, #31]
 8001774:	2b07      	cmp	r3, #7
 8001776:	d9eb      	bls.n	8001750 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001780:	b29a      	uxth	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	b292      	uxth	r2, r2
 800178c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001798:	b29a      	uxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	b292      	uxth	r2, r2
 80017a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017a8:	bf00      	nop
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f6      	beq.n	80017aa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ce:	b292      	uxth	r2, r2
 80017d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	77fb      	strb	r3, [r7, #31]
 80017d8:	e00f      	b.n	80017fa <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017da:	7ffb      	ldrb	r3, [r7, #31]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	4611      	mov	r1, r2
 80017e2:	7ffa      	ldrb	r2, [r7, #31]
 80017e4:	0092      	lsls	r2, r2, #2
 80017e6:	440a      	add	r2, r1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	3320      	adds	r3, #32
 80017ec:	443b      	add	r3, r7
 80017ee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80017f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80017f4:	7ffb      	ldrb	r3, [r7, #31]
 80017f6:	3301      	adds	r3, #1
 80017f8:	77fb      	strb	r3, [r7, #31]
 80017fa:	7ffb      	ldrb	r3, [r7, #31]
 80017fc:	2b07      	cmp	r3, #7
 80017fe:	d9ec      	bls.n	80017da <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0208 	orr.w	r2, r2, #8
 8001812:	b292      	uxth	r2, r2
 8001814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0204 	orr.w	r2, r2, #4
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f007 ff01 	bl	8009650 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800184e:	e026      	b.n	800189e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00f      	beq.n	800187a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800186c:	b292      	uxth	r2, r2
 800186e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f007 febf 	bl	80095f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001878:	e011      	b.n	800189e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00c      	beq.n	800189e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800188c:	b29a      	uxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001896:	b292      	uxth	r2, r2
 8001898:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800189c:	bf00      	nop
  }
}
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_PCD_SetAddress+0x1a>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e012      	b.n	80018e4 <HAL_PCD_SetAddress+0x40>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f005 fe87 	bl	80075e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	70fb      	strb	r3, [r7, #3]
 80018fe:	460b      	mov	r3, r1
 8001900:	803b      	strh	r3, [r7, #0]
 8001902:	4613      	mov	r3, r2
 8001904:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800190a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800190e:	2b00      	cmp	r3, #0
 8001910:	da0e      	bge.n	8001930 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	f003 0207 	and.w	r2, r3, #7
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	3310      	adds	r3, #16
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	705a      	strb	r2, [r3, #1]
 800192e:	e00e      	b.n	800194e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	f003 0207 	and.w	r2, r3, #7
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	b2da      	uxtb	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800195a:	883a      	ldrh	r2, [r7, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	78ba      	ldrb	r2, [r7, #2]
 8001964:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001966:	78bb      	ldrb	r3, [r7, #2]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d102      	bne.n	8001972 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_PCD_EP_Open+0x94>
 800197c:	2302      	movs	r3, #2
 800197e:	e00e      	b.n	800199e <HAL_PCD_EP_Open+0xb2>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 fbd0 	bl	8005134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800199c:	7afb      	ldrb	r3, [r7, #11]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0e      	bge.n	80019d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 0207 	and.w	r2, r3, #7
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	3310      	adds	r3, #16
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2201      	movs	r2, #1
 80019d4:	705a      	strb	r2, [r3, #1]
 80019d6:	e00e      	b.n	80019f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	f003 0207 	and.w	r2, r3, #7
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_PCD_EP_Close+0x6a>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e00e      	b.n	8001a2e <HAL_PCD_EP_Close+0x88>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 ff48 	bl	80058b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	460b      	mov	r3, r1
 8001a44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a46:	7afb      	ldrb	r3, [r7, #11]
 8001a48:	f003 0207 	and.w	r2, r3, #7
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2200      	movs	r2, #0
 8001a74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a76:	7afb      	ldrb	r3, [r7, #11]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f004 f8ff 	bl	8005c8c <USB_EPStartXfer>

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	f003 0207 	and.w	r2, r3, #7
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	f003 0207 	and.w	r2, r3, #7
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	3310      	adds	r3, #16
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6979      	ldr	r1, [r7, #20]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 f8b1 	bl	8005c8c <USB_EPStartXfer>

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	7912      	ldrb	r2, [r2, #4]
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e04c      	b.n	8001bec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da0e      	bge.n	8001b78 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	f003 0207 	and.w	r2, r3, #7
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	3310      	adds	r3, #16
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	705a      	strb	r2, [r3, #1]
 8001b76:	e00c      	b.n	8001b92 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_PCD_EP_SetStall+0x7e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e01c      	b.n	8001bec <HAL_PCD_EP_SetStall+0xb8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68f9      	ldr	r1, [r7, #12]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f005 fc14 	bl	80073ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d108      	bne.n	8001be2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f005 fd39 	bl	8007654 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	7912      	ldrb	r2, [r2, #4]
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e040      	b.n	8001c94 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da0e      	bge.n	8001c38 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 0207 	and.w	r2, r3, #7
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	3310      	adds	r3, #16
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	705a      	strb	r2, [r3, #1]
 8001c36:	e00e      	b.n	8001c56 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_PCD_EP_ClrStall+0x82>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e00e      	b.n	8001c94 <HAL_PCD_EP_ClrStall+0xa0>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 fc02 	bl	800748e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b096      	sub	sp, #88	; 0x58
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ca4:	e3bc      	b.n	8002420 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001cc0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 8176 	bne.w	8001fb6 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001cca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d14f      	bne.n	8001d76 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce6:	81fb      	strh	r3, [r7, #14]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	89fb      	ldrh	r3, [r7, #14]
 8001cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	3302      	adds	r3, #2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	441a      	add	r2, r3
 8001d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d38:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f007 fc40 	bl	80095c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7b5b      	ldrb	r3, [r3, #13]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8369 	beq.w	8002420 <PCD_EP_ISR_Handler+0x784>
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 8364 	bne.w	8002420 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7b5b      	ldrb	r3, [r3, #13]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	735a      	strb	r2, [r3, #13]
 8001d74:	e354      	b.n	8002420 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001d7c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d034      	beq.n	8001dfe <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	3306      	adds	r3, #6
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dcc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f005 fc8e 	bl	80076f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001de4:	4013      	ands	r3, r2
 8001de6:	823b      	strh	r3, [r7, #16]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	8a3a      	ldrh	r2, [r7, #16]
 8001dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001df2:	b292      	uxth	r2, r2
 8001df4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f007 fbb6 	bl	8009568 <HAL_PCD_SetupStageCallback>
 8001dfc:	e310      	b.n	8002420 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dfe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f280 830c 	bge.w	8002420 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e14:	4013      	ands	r3, r2
 8001e16:	83fb      	strh	r3, [r7, #30]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	8bfa      	ldrh	r2, [r7, #30]
 8001e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e22:	b292      	uxth	r2, r2
 8001e24:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	3306      	adds	r3, #6
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <PCD_EP_ISR_Handler+0x1f2>
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d015      	beq.n	8001e8e <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e68:	6959      	ldr	r1, [r3, #20]
 8001e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e70:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f005 fc3e 	bl	80076f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	441a      	add	r2, r3
 8001e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e84:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e86:	2100      	movs	r1, #0
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f007 fb7f 	bl	800958c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 82bd 	bne.w	8002420 <PCD_EP_ISR_Handler+0x784>
 8001ea6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eaa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001eae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001eb2:	f000 82b5 	beq.w	8002420 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	4413      	add	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b3e      	cmp	r3, #62	; 0x3e
 8001eec:	d91d      	bls.n	8001f2a <PCD_EP_ISR_Handler+0x28e>
 8001eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <PCD_EP_ISR_Handler+0x26c>
 8001f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f04:	3b01      	subs	r3, #1
 8001f06:	647b      	str	r3, [r7, #68]	; 0x44
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	029b      	lsls	r3, r3, #10
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	e026      	b.n	8001f78 <PCD_EP_ISR_Handler+0x2dc>
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <PCD_EP_ISR_Handler+0x2ac>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	e017      	b.n	8001f78 <PCD_EP_ISR_Handler+0x2dc>
 8001f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <PCD_EP_ISR_Handler+0x2c6>
 8001f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f5e:	3301      	adds	r3, #1
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	029b      	lsls	r3, r3, #10
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f88:	827b      	strh	r3, [r7, #18]
 8001f8a:	8a7b      	ldrh	r3, [r7, #18]
 8001f8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f90:	827b      	strh	r3, [r7, #18]
 8001f92:	8a7b      	ldrh	r3, [r7, #18]
 8001f94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f98:	827b      	strh	r3, [r7, #18]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	8a7b      	ldrh	r3, [r7, #18]
 8001fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	8013      	strh	r3, [r2, #0]
 8001fb4:	e234      	b.n	8002420 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f280 80fc 	bge.w	80021cc <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fea:	4013      	ands	r3, r2
 8001fec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002006:	b292      	uxth	r2, r2
 8002008:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800200a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002022:	7b1b      	ldrb	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d125      	bne.n	8002074 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002030:	b29b      	uxth	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	3306      	adds	r3, #6
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002050:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002054:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8092 	beq.w	8002182 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002064:	6959      	ldr	r1, [r3, #20]
 8002066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002068:	88da      	ldrh	r2, [r3, #6]
 800206a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800206e:	f005 fb41 	bl	80076f4 <USB_ReadPMA>
 8002072:	e086      	b.n	8002182 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002076:	78db      	ldrb	r3, [r3, #3]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d10a      	bne.n	8002092 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800207c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002080:	461a      	mov	r2, r3
 8002082:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f9d9 	bl	800243c <HAL_PCD_EP_DB_Receive>
 800208a:	4603      	mov	r3, r0
 800208c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002090:	e077      	b.n	8002182 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	441a      	add	r2, r3
 80020be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80020c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d024      	beq.n	800213a <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	3302      	adds	r3, #2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002118:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800211c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002120:	2b00      	cmp	r3, #0
 8002122:	d02e      	beq.n	8002182 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212a:	6959      	ldr	r1, [r3, #20]
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	891a      	ldrh	r2, [r3, #8]
 8002130:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002134:	f005 fade 	bl	80076f4 <USB_ReadPMA>
 8002138:	e023      	b.n	8002182 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002142:	b29b      	uxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	3306      	adds	r3, #6
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002162:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002166:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002174:	6959      	ldr	r1, [r3, #20]
 8002176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002178:	895a      	ldrh	r2, [r3, #10]
 800217a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800217e:	f005 fab9 	bl	80076f4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800218a:	441a      	add	r2, r3
 800218c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002198:	441a      	add	r2, r3
 800219a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800219e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <PCD_EP_ISR_Handler+0x516>
 80021a6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80021aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d206      	bcs.n	80021c0 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f007 f9e7 	bl	800958c <HAL_PCD_DataOutStageCallback>
 80021be:	e005      	b.n	80021cc <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fd60 	bl	8005c8c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8123 	beq.w	8002420 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 80021da:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	3310      	adds	r3, #16
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4413      	add	r3, r2
 80021ec:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800221e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002226:	b29b      	uxth	r3, r3
 8002228:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800222a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800222c:	78db      	ldrb	r3, [r3, #3]
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 80a2 	bne.w	8002378 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8002234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800223a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223c:	7b1b      	ldrb	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8093 	beq.w	800236a <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002244:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d046      	beq.n	80022de <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d126      	bne.n	80022a6 <PCD_EP_ISR_Handler+0x60a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	4413      	add	r3, r2
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	011a      	lsls	r2, r3, #4
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	4413      	add	r3, r2
 800227a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228a:	b29a      	uxth	r2, r3
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	801a      	strh	r2, [r3, #0]
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800229a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800229e:	b29a      	uxth	r2, r3
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	801a      	strh	r2, [r3, #0]
 80022a4:	e061      	b.n	800236a <PCD_EP_ISR_Handler+0x6ce>
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d15d      	bne.n	800236a <PCD_EP_ISR_Handler+0x6ce>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	4413      	add	r3, r2
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	011a      	lsls	r2, r3, #4
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	4413      	add	r3, r2
 80022d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	2200      	movs	r2, #0
 80022da:	801a      	strh	r2, [r3, #0]
 80022dc:	e045      	b.n	800236a <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d126      	bne.n	800233a <PCD_EP_ISR_Handler+0x69e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	4413      	add	r3, r2
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
 8002304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	011a      	lsls	r2, r3, #4
 800230a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230c:	4413      	add	r3, r2
 800230e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231e:	b29a      	uxth	r2, r3
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002332:	b29a      	uxth	r2, r3
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	e017      	b.n	800236a <PCD_EP_ISR_Handler+0x6ce>
 800233a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d113      	bne.n	800236a <PCD_EP_ISR_Handler+0x6ce>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800234a:	b29b      	uxth	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002350:	4413      	add	r3, r2
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	011a      	lsls	r2, r3, #4
 800235a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235c:	4413      	add	r3, r2
 800235e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002366:	2200      	movs	r2, #0
 8002368:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800236a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f007 f926 	bl	80095c2 <HAL_PCD_DataInStageCallback>
 8002376:	e053      	b.n	8002420 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002378:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d146      	bne.n	8002412 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238c:	b29b      	uxth	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	3302      	adds	r3, #2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80023b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d907      	bls.n	80023cc <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 80023bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023c4:	1ad2      	subs	r2, r2, r3
 80023c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	e002      	b.n	80023d2 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 80023cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80023d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f007 f8ee 	bl	80095c2 <HAL_PCD_DataInStageCallback>
 80023e6:	e01b      	b.n	8002420 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80023e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023f0:	441a      	add	r2, r3
 80023f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80023f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023fe:	441a      	add	r2, r3
 8002400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002402:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fc3e 	bl	8005c8c <USB_EPStartXfer>
 8002410:	e006      	b.n	8002420 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002412:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002416:	461a      	mov	r2, r3
 8002418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f91b 	bl	8002656 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002428:	b29b      	uxth	r3, r3
 800242a:	b21b      	sxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	f6ff ac3a 	blt.w	8001ca6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3758      	adds	r7, #88	; 0x58
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d07e      	beq.n	8002552 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245c:	b29b      	uxth	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	3302      	adds	r3, #2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	8b7b      	ldrh	r3, [r7, #26]
 8002484:	429a      	cmp	r2, r3
 8002486:	d306      	bcc.n	8002496 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	8b7b      	ldrh	r3, [r7, #26]
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	619a      	str	r2, [r3, #24]
 8002494:	e002      	b.n	800249c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d123      	bne.n	80024ec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	833b      	strh	r3, [r7, #24]
 80024c0:	8b3b      	ldrh	r3, [r7, #24]
 80024c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024c6:	833b      	strh	r3, [r7, #24]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	8b3b      	ldrh	r3, [r7, #24]
 80024d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01f      	beq.n	8002536 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	82fb      	strh	r3, [r7, #22]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	441a      	add	r2, r3
 8002520:	8afb      	ldrh	r3, [r7, #22]
 8002522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800252a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800252e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002532:	b29b      	uxth	r3, r3
 8002534:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002536:	8b7b      	ldrh	r3, [r7, #26]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8087 	beq.w	800264c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	6959      	ldr	r1, [r3, #20]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	891a      	ldrh	r2, [r3, #8]
 800254a:	8b7b      	ldrh	r3, [r7, #26]
 800254c:	f005 f8d2 	bl	80076f4 <USB_ReadPMA>
 8002550:	e07c      	b.n	800264c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	3306      	adds	r3, #6
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	8b7b      	ldrh	r3, [r7, #26]
 8002582:	429a      	cmp	r2, r3
 8002584:	d306      	bcc.n	8002594 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	8b7b      	ldrh	r3, [r7, #26]
 800258c:	1ad2      	subs	r2, r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	619a      	str	r2, [r3, #24]
 8002592:	e002      	b.n	800259a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d123      	bne.n	80025ea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025bc:	83fb      	strh	r3, [r7, #30]
 80025be:	8bfb      	ldrh	r3, [r7, #30]
 80025c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025c4:	83fb      	strh	r3, [r7, #30]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	8bfb      	ldrh	r3, [r7, #30]
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d11f      	bne.n	8002634 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	83bb      	strh	r3, [r7, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	441a      	add	r2, r3
 800261e:	8bbb      	ldrh	r3, [r7, #28]
 8002620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002630:	b29b      	uxth	r3, r3
 8002632:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002634:	8b7b      	ldrh	r3, [r7, #26]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6959      	ldr	r1, [r3, #20]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	895a      	ldrh	r2, [r3, #10]
 8002646:	8b7b      	ldrh	r3, [r7, #26]
 8002648:	f005 f854 	bl	80076f4 <USB_ReadPMA>
    }
  }

  return count;
 800264c:	8b7b      	ldrh	r3, [r7, #26]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b0a4      	sub	sp, #144	; 0x90
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	4613      	mov	r3, r2
 8002662:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 81dd 	beq.w	8002a2a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	3302      	adds	r3, #2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002698:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d907      	bls.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80026b0:	1ad2      	subs	r2, r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	619a      	str	r2, [r3, #24]
 80026b6:	e002      	b.n	80026be <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 80b9 	bne.w	800283a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	785b      	ldrb	r3, [r3, #1]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d126      	bne.n	800271e <HAL_PCD_EP_DB_Transmit+0xc8>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	4413      	add	r3, r2
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	011a      	lsls	r2, r3, #4
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	4413      	add	r3, r2
 80026f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002702:	b29a      	uxth	r2, r3
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	801a      	strh	r2, [r3, #0]
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002716:	b29a      	uxth	r2, r3
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	e01a      	b.n	8002754 <HAL_PCD_EP_DB_Transmit+0xfe>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d116      	bne.n	8002754 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002734:	b29b      	uxth	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	4413      	add	r3, r2
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	011a      	lsls	r2, r3, #4
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	4413      	add	r3, r2
 8002748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	2200      	movs	r2, #0
 8002752:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	785b      	ldrb	r3, [r3, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d126      	bne.n	80027b0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	011a      	lsls	r2, r3, #4
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4413      	add	r3, r2
 8002784:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002794:	b29a      	uxth	r2, r3
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	e017      	b.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d113      	bne.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	4413      	add	r3, r2
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	011a      	lsls	r2, r3, #4
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	4413      	add	r3, r2
 80027d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2200      	movs	r2, #0
 80027de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f006 feeb 	bl	80095c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 82fc 	beq.w	8002df0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	82fb      	strh	r3, [r7, #22]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	8afb      	ldrh	r3, [r7, #22]
 8002824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800282c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002834:	b29b      	uxth	r3, r3
 8002836:	8013      	strh	r3, [r2, #0]
 8002838:	e2da      	b.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d021      	beq.n	8002888 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	441a      	add	r2, r3
 8002870:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800287c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002884:	b29b      	uxth	r3, r3
 8002886:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 82ae 	bne.w	8002df0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800289c:	441a      	add	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028aa:	441a      	add	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d30b      	bcc.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6a1a      	ldr	r2, [r3, #32]
 80028c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028cc:	1ad2      	subs	r2, r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	621a      	str	r2, [r3, #32]
 80028d2:	e017      	b.n	8002904 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d108      	bne.n	80028ee <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80028dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028ec:	e00a      	b.n	8002904 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2200      	movs	r2, #0
 8002902:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d165      	bne.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x382>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	4413      	add	r3, r2
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	011a      	lsls	r2, r3, #4
 800292a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292c:	4413      	add	r3, r2
 800292e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
 8002934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293e:	b29a      	uxth	r2, r3
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002948:	2b3e      	cmp	r3, #62	; 0x3e
 800294a:	d91d      	bls.n	8002988 <HAL_PCD_EP_DB_Transmit+0x332>
 800294c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	64bb      	str	r3, [r7, #72]	; 0x48
 8002954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <HAL_PCD_EP_DB_Transmit+0x310>
 8002960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002962:	3b01      	subs	r3, #1
 8002964:	64bb      	str	r3, [r7, #72]	; 0x48
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29a      	uxth	r2, r3
 800296c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296e:	b29b      	uxth	r3, r3
 8002970:	029b      	lsls	r3, r3, #10
 8002972:	b29b      	uxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800297c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002980:	b29a      	uxth	r2, r3
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	e044      	b.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x350>
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	e035      	b.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80029ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029bc:	3301      	adds	r3, #1
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	029b      	lsls	r3, r3, #10
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	e01c      	b.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d118      	bne.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	647b      	str	r3, [r7, #68]	; 0x44
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f4:	4413      	add	r3, r2
 80029f6:	647b      	str	r3, [r7, #68]	; 0x44
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	011a      	lsls	r2, r3, #4
 80029fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a00:	4413      	add	r3, r2
 8002a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a06:	643b      	str	r3, [r7, #64]	; 0x40
 8002a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a10:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	6959      	ldr	r1, [r3, #20]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	891a      	ldrh	r2, [r3, #8]
 8002a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f004 fe21 	bl	800766a <USB_WritePMA>
 8002a28:	e1e2      	b.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3306      	adds	r3, #6
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a52:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d307      	bcc.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	619a      	str	r2, [r3, #24]
 8002a70:	e002      	b.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f040 80c0 	bne.w	8002c02 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d126      	bne.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x482>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a9e:	4413      	add	r3, r2
 8002aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	011a      	lsls	r2, r3, #4
 8002aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aaa:	4413      	add	r3, r2
 8002aac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ab0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ad4:	801a      	strh	r2, [r3, #0]
 8002ad6:	e01a      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d116      	bne.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002af4:	4413      	add	r3, r2
 8002af6:	667b      	str	r3, [r7, #100]	; 0x64
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	011a      	lsls	r2, r3, #4
 8002afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b00:	4413      	add	r3, r2
 8002b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b06:	663b      	str	r3, [r7, #96]	; 0x60
 8002b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	677b      	str	r3, [r7, #116]	; 0x74
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d12b      	bne.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b30:	4413      	add	r3, r2
 8002b32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	011a      	lsls	r2, r3, #4
 8002b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e017      	b.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d113      	bne.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8a:	4413      	add	r3, r2
 8002b8c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	011a      	lsls	r2, r3, #4
 8002b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b96:	4413      	add	r3, r2
 8002b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b9c:	673b      	str	r3, [r7, #112]	; 0x70
 8002b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f006 fd09 	bl	80095c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 811a 	bne.w	8002df0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	441a      	add	r2, r3
 8002be8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	8013      	strh	r3, [r2, #0]
 8002c00:	e0f6      	b.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d121      	bne.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	f040 80ca 	bne.w	8002df0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c64:	441a      	add	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c72:	441a      	add	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d30b      	bcc.n	8002c9c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c94:	1ad2      	subs	r2, r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	621a      	str	r2, [r3, #32]
 8002c9a:	e017      	b.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d108      	bne.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002ca4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cb4:	e00a      	b.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d165      	bne.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x750>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cee:	4413      	add	r3, r2
 8002cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	011a      	lsls	r2, r3, #4
 8002cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d00:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d10:	801a      	strh	r2, [r3, #0]
 8002d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d16:	2b3e      	cmp	r3, #62	; 0x3e
 8002d18:	d91d      	bls.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x700>
 8002d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d30:	3b01      	subs	r3, #1
 8002d32:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	e041      	b.n	8002dda <HAL_PCD_EP_DB_Transmit+0x784>
 8002d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d70:	801a      	strh	r2, [r3, #0]
 8002d72:	e032      	b.n	8002dda <HAL_PCD_EP_DB_Transmit+0x784>
 8002d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_PCD_EP_DB_Transmit+0x738>
 8002d88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	029b      	lsls	r3, r3, #10
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	e019      	b.n	8002dda <HAL_PCD_EP_DB_Transmit+0x784>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	785b      	ldrb	r3, [r3, #1]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d115      	bne.n	8002dda <HAL_PCD_EP_DB_Transmit+0x784>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbc:	4413      	add	r3, r2
 8002dbe:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	011a      	lsls	r2, r3, #4
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	4413      	add	r3, r2
 8002dca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dce:	653b      	str	r3, [r7, #80]	; 0x50
 8002dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6959      	ldr	r1, [r3, #20]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	895a      	ldrh	r2, [r3, #10]
 8002de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f004 fc3d 	bl	800766a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0a:	82bb      	strh	r3, [r7, #20]
 8002e0c:	8abb      	ldrh	r3, [r7, #20]
 8002e0e:	f083 0310 	eor.w	r3, r3, #16
 8002e12:	82bb      	strh	r3, [r7, #20]
 8002e14:	8abb      	ldrh	r3, [r7, #20]
 8002e16:	f083 0320 	eor.w	r3, r3, #32
 8002e1a:	82bb      	strh	r3, [r7, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	8abb      	ldrh	r3, [r7, #20]
 8002e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3790      	adds	r7, #144	; 0x90
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b087      	sub	sp, #28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	817b      	strh	r3, [r7, #10]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e5c:	897b      	ldrh	r3, [r7, #10]
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	f003 0207 	and.w	r2, r3, #7
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	3310      	adds	r3, #16
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e009      	b.n	8002e94 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e80:	897a      	ldrh	r2, [r7, #10]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d107      	bne.n	8002eaa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	80da      	strh	r2, [r3, #6]
 8002ea8:	e00b      	b.n	8002ec2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2201      	movs	r2, #1
 8002eae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0c1b      	lsrs	r3, r3, #16
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e272      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8087 	beq.w	8002ffe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d00c      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002efc:	4b8f      	ldr	r3, [pc, #572]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d112      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5e>
 8002f08:	4b8c      	ldr	r3, [pc, #560]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d10b      	bne.n	8002f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d06c      	beq.n	8002ffc <HAL_RCC_OscConfig+0x12c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d168      	bne.n	8002ffc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e24c      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x76>
 8002f38:	4b80      	ldr	r3, [pc, #512]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a7f      	ldr	r2, [pc, #508]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e02e      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x98>
 8002f4e:	4b7b      	ldr	r3, [pc, #492]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a7a      	ldr	r2, [pc, #488]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b78      	ldr	r3, [pc, #480]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a77      	ldr	r2, [pc, #476]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e01d      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0xbc>
 8002f72:	4b72      	ldr	r3, [pc, #456]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a71      	ldr	r2, [pc, #452]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b6f      	ldr	r3, [pc, #444]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6e      	ldr	r2, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd4>
 8002f8c:	4b6b      	ldr	r3, [pc, #428]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6a      	ldr	r2, [pc, #424]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a67      	ldr	r2, [pc, #412]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fd fcf0 	bl	8000990 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fd fcec 	bl	8000990 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e200      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b5d      	ldr	r3, [pc, #372]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0xe4>
 8002fd2:	e014      	b.n	8002ffe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd fcdc 	bl	8000990 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fd fcd8 	bl	8000990 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1ec      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x10c>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d063      	beq.n	80030d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003016:	4b49      	ldr	r3, [pc, #292]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b08      	cmp	r3, #8
 8003020:	d11c      	bne.n	800305c <HAL_RCC_OscConfig+0x18c>
 8003022:	4b46      	ldr	r3, [pc, #280]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d116      	bne.n	800305c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	4b43      	ldr	r3, [pc, #268]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_RCC_OscConfig+0x176>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e1c0      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4939      	ldr	r1, [pc, #228]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	e03a      	b.n	80030d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fd fc91 	bl	8000990 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003072:	f7fd fc8d 	bl	8000990 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e1a1      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4927      	ldr	r1, [pc, #156]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	e015      	b.n	80030d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_RCC_OscConfig+0x270>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ac:	f7fd fc70 	bl	8000990 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b4:	f7fd fc6c 	bl	8000990 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e180      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d03a      	beq.n	8003154 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d019      	beq.n	800311a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7fd fc50 	bl	8000990 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f4:	f7fd fc4c 	bl	8000990 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e160      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_RCC_OscConfig+0x26c>)
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f000 face 	bl	80036b4 <RCC_Delay>
 8003118:	e01c      	b.n	8003154 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_OscConfig+0x274>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fd fc36 	bl	8000990 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003126:	e00f      	b.n	8003148 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003128:	f7fd fc32 	bl	8000990 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d908      	bls.n	8003148 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e146      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	42420000 	.word	0x42420000
 8003144:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b92      	ldr	r3, [pc, #584]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e9      	bne.n	8003128 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a6 	beq.w	80032ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	4b88      	ldr	r3, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4a87      	ldr	r2, [pc, #540]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	61d3      	str	r3, [r2, #28]
 800317e:	4b85      	ldr	r3, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b82      	ldr	r3, [pc, #520]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a7e      	ldr	r2, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7fd fbf3 	bl	8000990 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fd fbef 	bl	8000990 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b64      	cmp	r3, #100	; 0x64
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e103      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b75      	ldr	r3, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x4c8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x312>
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a6e      	ldr	r2, [pc, #440]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	e02d      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x334>
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a69      	ldr	r2, [pc, #420]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a66      	ldr	r2, [pc, #408]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6213      	str	r3, [r2, #32]
 8003202:	e01c      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b05      	cmp	r3, #5
 800320a:	d10c      	bne.n	8003226 <HAL_RCC_OscConfig+0x356>
 800320c:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4a60      	ldr	r2, [pc, #384]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6213      	str	r3, [r2, #32]
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	e00b      	b.n	800323e <HAL_RCC_OscConfig+0x36e>
 8003226:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d015      	beq.n	8003272 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7fd fba3 	bl	8000990 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fd fb9f 	bl	8000990 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0b1      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ee      	beq.n	800324e <HAL_RCC_OscConfig+0x37e>
 8003270:	e014      	b.n	800329c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fd fb8d 	bl	8000990 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd fb89 	bl	8000990 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e09b      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003290:	4b40      	ldr	r3, [pc, #256]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ee      	bne.n	800327a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a3b      	ldr	r2, [pc, #236]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8087 	beq.w	80033c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d061      	beq.n	8003388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d146      	bne.n	800335a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd fb5d 	bl	8000990 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7fd fb59 	bl	8000990 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e06d      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f0      	bne.n	80032da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d108      	bne.n	8003314 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	4921      	ldr	r1, [pc, #132]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a19      	ldr	r1, [r3, #32]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	430b      	orrs	r3, r1
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fd fb2d 	bl	8000990 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333a:	f7fd fb29 	bl	8000990 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e03d      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x46a>
 8003358:	e035      	b.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <HAL_RCC_OscConfig+0x4cc>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fd fb16 	bl	8000990 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fd fb12 	bl	8000990 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e026      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x498>
 8003386:	e01e      	b.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e019      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
 8003394:	40021000 	.word	0x40021000
 8003398:	40007000 	.word	0x40007000
 800339c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_OscConfig+0x500>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0d0      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d910      	bls.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4965      	ldr	r1, [pc, #404]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0b8      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800343a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003452:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	494d      	ldr	r1, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d040      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d115      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07f      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d107      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e073      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06b      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034b2:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f023 0203 	bic.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4936      	ldr	r1, [pc, #216]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c4:	f7fd fa64 	bl	8000990 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fd fa60 	bl	8000990 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e053      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 020c 	and.w	r2, r3, #12
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1eb      	bne.n	80034cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d210      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 0207 	bic.w	r2, r3, #7
 800350a:	4922      	ldr	r1, [pc, #136]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e032      	b.n	800358a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003562:	f000 f821 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	490a      	ldr	r1, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	5ccb      	ldrb	r3, [r1, r3]
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1cc>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd f9c2 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40022000 	.word	0x40022000
 8003598:	40021000 	.word	0x40021000
 800359c:	08009b44 	.word	0x08009b44
 80035a0:	20000030 	.word	0x20000030
 80035a4:	20000034 	.word	0x20000034

080035a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_GetSysClockFreq+0x94>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d002      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x30>
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d003      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x36>
 80035d6:	e027      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 80035da:	613b      	str	r3, [r7, #16]
      break;
 80035dc:	e027      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0c9b      	lsrs	r3, r3, #18
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	4a17      	ldr	r2, [pc, #92]	; (8003644 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035e8:	5cd3      	ldrb	r3, [r2, r3]
 80035ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_GetSysClockFreq+0x94>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	0c5b      	lsrs	r3, r3, #17
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 800360a:	fb03 f202 	mul.w	r2, r3, r2
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e004      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0c      	ldr	r2, [pc, #48]	; (800364c <HAL_RCC_GetSysClockFreq+0xa4>)
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	613b      	str	r3, [r7, #16]
      break;
 8003626:	e002      	b.n	800362e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RCC_GetSysClockFreq+0x98>)
 800362a:	613b      	str	r3, [r7, #16]
      break;
 800362c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362e:	693b      	ldr	r3, [r7, #16]
}
 8003630:	4618      	mov	r0, r3
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	007a1200 	.word	0x007a1200
 8003644:	08009b5c 	.word	0x08009b5c
 8003648:	08009b6c 	.word	0x08009b6c
 800364c:	003d0900 	.word	0x003d0900

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b02      	ldr	r3, [pc, #8]	; (8003660 <HAL_RCC_GetHCLKFreq+0x10>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	20000030 	.word	0x20000030

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003668:	f7ff fff2 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08009b54 	.word	0x08009b54

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003690:	f7ff ffde 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0adb      	lsrs	r3, r3, #11
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08009b54 	.word	0x08009b54

080036b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <RCC_Delay+0x34>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <RCC_Delay+0x38>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0a5b      	lsrs	r3, r3, #9
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d0:	bf00      	nop
  }
  while (Delay --);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	60fa      	str	r2, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f9      	bne.n	80036d0 <RCC_Delay+0x1c>
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	20000030 	.word	0x20000030
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d07d      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800370c:	2300      	movs	r3, #0
 800370e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003710:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10d      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003726:	61d3      	str	r3, [r2, #28]
 8003728:	4b49      	ldr	r3, [pc, #292]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003738:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d118      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003744:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a42      	ldr	r2, [pc, #264]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003750:	f7fd f91e 	bl	8000990 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	e008      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7fd f91a 	bl	8000990 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e06d      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b3a      	ldr	r3, [pc, #232]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02e      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	429a      	cmp	r2, r3
 8003792:	d027      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003794:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800379e:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a4:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037aa:	4a29      	ldr	r2, [pc, #164]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d014      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fd f8e9 	bl	8000990 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fd f8e5 	bl	8000990 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e036      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ee      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e4:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4917      	ldr	r1, [pc, #92]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d105      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	4a13      	ldr	r2, [pc, #76]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003806:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	490b      	ldr	r1, [pc, #44]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4904      	ldr	r1, [pc, #16]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	40007000 	.word	0x40007000
 8003858:	42420440 	.word	0x42420440

0800385c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e041      	b.n	80038f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fc fe36 	bl	80004f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fa5c 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d001      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e03a      	b.n	800398a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_TIM_Base_Start_IT+0x98>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00e      	beq.n	8003954 <HAL_TIM_Base_Start_IT+0x58>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393e:	d009      	beq.n	8003954 <HAL_TIM_Base_Start_IT+0x58>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a14      	ldr	r2, [pc, #80]	; (8003998 <HAL_TIM_Base_Start_IT+0x9c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d004      	beq.n	8003954 <HAL_TIM_Base_Start_IT+0x58>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_TIM_Base_Start_IT+0xa0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d111      	bne.n	8003978 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b06      	cmp	r3, #6
 8003964:	d010      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	e007      	b.n	8003988 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40000400 	.word	0x40000400
 800399c:	40000800 	.word	0x40000800

080039a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d020      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01b      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0202 	mvn.w	r2, #2
 80039d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f998 	bl	8003d20 <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f98b 	bl	8003d0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f99a 	bl	8003d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d020      	beq.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01b      	beq.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0204 	mvn.w	r2, #4
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f972 	bl	8003d20 <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f965 	bl	8003d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f974 	bl	8003d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d020      	beq.n	8003a9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01b      	beq.n	8003a9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0208 	mvn.w	r2, #8
 8003a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2204      	movs	r2, #4
 8003a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f94c 	bl	8003d20 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f93f 	bl	8003d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f94e 	bl	8003d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d020      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0210 	mvn.w	r2, #16
 8003ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2208      	movs	r2, #8
 8003abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f926 	bl	8003d20 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f919 	bl	8003d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f928 	bl	8003d32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0201 	mvn.w	r2, #1
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fc fb56 	bl	80001b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa7f 	bl	800402e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00c      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8f8 	bl	8003d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00c      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0220 	mvn.w	r2, #32
 8003b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa52 	bl	800401c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIM_ConfigClockSource+0x1c>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0b4      	b.n	8003d06 <HAL_TIM_ConfigClockSource+0x186>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd4:	d03e      	beq.n	8003c54 <HAL_TIM_ConfigClockSource+0xd4>
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bda:	f200 8087 	bhi.w	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be2:	f000 8086 	beq.w	8003cf2 <HAL_TIM_ConfigClockSource+0x172>
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d87f      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b70      	cmp	r3, #112	; 0x70
 8003bee:	d01a      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0xa6>
 8003bf0:	2b70      	cmp	r3, #112	; 0x70
 8003bf2:	d87b      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b60      	cmp	r3, #96	; 0x60
 8003bf6:	d050      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x11a>
 8003bf8:	2b60      	cmp	r3, #96	; 0x60
 8003bfa:	d877      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b50      	cmp	r3, #80	; 0x50
 8003bfe:	d03c      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0xfa>
 8003c00:	2b50      	cmp	r3, #80	; 0x50
 8003c02:	d873      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d058      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x13a>
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d86f      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003c0c:	2b30      	cmp	r3, #48	; 0x30
 8003c0e:	d064      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x15a>
 8003c10:	2b30      	cmp	r3, #48	; 0x30
 8003c12:	d86b      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d060      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x15a>
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d867      	bhi.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05c      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x15a>
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d05a      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x15a>
 8003c24:	e062      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6899      	ldr	r1, [r3, #8]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f000 f974 	bl	8003f22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	609a      	str	r2, [r3, #8]
      break;
 8003c52:	e04f      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6899      	ldr	r1, [r3, #8]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f000 f95d 	bl	8003f22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c76:	609a      	str	r2, [r3, #8]
      break;
 8003c78:	e03c      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 f8d4 	bl	8003e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2150      	movs	r1, #80	; 0x50
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f92b 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003c98:	e02c      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f000 f8f2 	bl	8003e90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2160      	movs	r1, #96	; 0x60
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f91b 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003cb8:	e01c      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f000 f8b4 	bl	8003e34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2140      	movs	r1, #64	; 0x40
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f90b 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003cd8:	e00c      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f000 f902 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003cea:	e003      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e000      	b.n	8003cf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
	...

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <TIM_Base_SetConfig+0xd0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	; (8003e2c <TIM_Base_SetConfig+0xd4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <TIM_Base_SetConfig+0xd8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <TIM_Base_SetConfig+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <TIM_Base_SetConfig+0xd4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	; (8003e30 <TIM_Base_SetConfig+0xd8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0d      	ldr	r2, [pc, #52]	; (8003e28 <TIM_Base_SetConfig+0xd0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d103      	bne.n	8003e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f023 0201 	bic.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800

08003e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f023 030a 	bic.w	r3, r3, #10
 8003e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0210 	bic.w	r2, r3, #16
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	031b      	lsls	r3, r3, #12
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f043 0307 	orr.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b087      	sub	sp, #28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	021a      	lsls	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	609a      	str	r2, [r3, #8]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e046      	b.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d009      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a10      	ldr	r2, [pc, #64]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800

0800401c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e042      	b.n	80040d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fc fa6a 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 ff61 	bl	8004f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d156      	bne.n	80041a8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_UART_Transmit_DMA+0x26>
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e04f      	b.n	80041aa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	88fa      	ldrh	r2, [r7, #6]
 8004114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	88fa      	ldrh	r2, [r7, #6]
 800411a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2221      	movs	r2, #33	; 0x21
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <HAL_UART_Transmit_DMA+0xd4>)
 8004130:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <HAL_UART_Transmit_DMA+0xd8>)
 8004138:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <HAL_UART_Transmit_DMA+0xdc>)
 8004140:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	2200      	movs	r2, #0
 8004148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	6819      	ldr	r1, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3304      	adds	r3, #4
 800415e:	461a      	mov	r2, r3
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	f7fc fd87 	bl	8000c74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800416e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	617b      	str	r3, [r7, #20]
   return(result);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004190:	627a      	str	r2, [r7, #36]	; 0x24
 8004192:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6a39      	ldr	r1, [r7, #32]
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	61fb      	str	r3, [r7, #28]
   return(result);
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e000      	b.n	80041aa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3730      	adds	r7, #48	; 0x30
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	080047e1 	.word	0x080047e1
 80041b8:	0800487b 	.word	0x0800487b
 80041bc:	080049ff 	.word	0x080049ff

080041c0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	; 0x30
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d146      	bne.n	8004268 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e03f      	b.n	800426a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	461a      	mov	r2, r3
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fc49 	bl	8004a94 <UART_Start_Receive_DMA>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	2b01      	cmp	r3, #1
 800420e:	d125      	bne.n	800425c <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	617b      	str	r3, [r7, #20]
   return(result);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f043 0310 	orr.w	r3, r3, #16
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004246:	627a      	str	r2, [r7, #36]	; 0x24
 8004248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6a39      	ldr	r1, [r7, #32]
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	61fb      	str	r3, [r7, #28]
   return(result);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800425a:	e002      	b.n	8004262 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8004262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004266:	e000      	b.n	800426a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3730      	adds	r7, #48	; 0x30
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b0ba      	sub	sp, #232	; 0xe8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800429a:	2300      	movs	r3, #0
 800429c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_UART_IRQHandler+0x66>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fd7c 	bl	8004dd0 <UART_Receive_IT>
      return;
 80042d8:	e25b      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80de 	beq.w	80044a0 <HAL_UART_IRQHandler+0x22c>
 80042e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80d1 	beq.w	80044a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_UART_IRQHandler+0xae>
 800430a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	f043 0201 	orr.w	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_UART_IRQHandler+0xd2>
 800432e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f043 0202 	orr.w	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_UART_IRQHandler+0xf6>
 8004352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f043 0204 	orr.w	r2, r3, #4
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d011      	beq.n	800439a <HAL_UART_IRQHandler+0x126>
 8004376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f043 0208 	orr.w	r2, r3, #8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 81f2 	beq.w	8004788 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_UART_IRQHandler+0x14e>
 80043b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fd07 	bl	8004dd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <HAL_UART_IRQHandler+0x17a>
 80043e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d04f      	beq.n	800448e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fc11 	bl	8004c16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d041      	beq.n	8004486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3314      	adds	r3, #20
 8004408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800442e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800443a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1d9      	bne.n	8004402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d013      	beq.n	800447e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	4a7e      	ldr	r2, [pc, #504]	; (8004654 <HAL_UART_IRQHandler+0x3e0>)
 800445c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fca2 	bl	8000dac <HAL_DMA_Abort_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004478:	4610      	mov	r0, r2
 800447a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	e00e      	b.n	800449c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9a5 	bl	80047ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004484:	e00a      	b.n	800449c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9a1 	bl	80047ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800448c:	e006      	b.n	800449c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f99d 	bl	80047ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800449a:	e175      	b.n	8004788 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	bf00      	nop
    return;
 800449e:	e173      	b.n	8004788 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f040 814f 	bne.w	8004748 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8148 	beq.w	8004748 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8141 	beq.w	8004748 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80b6 	beq.w	8004658 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8145 	beq.w	800478c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800450a:	429a      	cmp	r2, r3
 800450c:	f080 813e 	bcs.w	800478c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004516:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b20      	cmp	r3, #32
 8004520:	f000 8088 	beq.w	8004634 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800453a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800453e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	330c      	adds	r3, #12
 800454c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004550:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004554:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800455c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1d9      	bne.n	8004524 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004594:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004598:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800459c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e1      	bne.n	8004570 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e3      	bne.n	80045ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	f023 0310 	bic.w	r3, r3, #16
 8004608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004616:	65ba      	str	r2, [r7, #88]	; 0x58
 8004618:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800461c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e3      	bne.n	80045f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc fb80 	bl	8000d34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004642:	b29b      	uxth	r3, r3
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	b29b      	uxth	r3, r3
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fb fd90 	bl	8000170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004650:	e09c      	b.n	800478c <HAL_UART_IRQHandler+0x518>
 8004652:	bf00      	nop
 8004654:	08004cdb 	.word	0x08004cdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004660:	b29b      	uxth	r3, r3
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 808e 	beq.w	8004790 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8089 	beq.w	8004790 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800468e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046a2:	647a      	str	r2, [r7, #68]	; 0x44
 80046a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e3      	bne.n	800467e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	623b      	str	r3, [r7, #32]
   return(result);
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046da:	633a      	str	r2, [r7, #48]	; 0x30
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e3      	bne.n	80046b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	60fb      	str	r3, [r7, #12]
   return(result);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0310 	bic.w	r3, r3, #16
 8004712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004720:	61fa      	str	r2, [r7, #28]
 8004722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	69b9      	ldr	r1, [r7, #24]
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	617b      	str	r3, [r7, #20]
   return(result);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e3      	bne.n	80046fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800473a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fb fd15 	bl	8000170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004746:	e023      	b.n	8004790 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004750:	2b00      	cmp	r3, #0
 8004752:	d009      	beq.n	8004768 <HAL_UART_IRQHandler+0x4f4>
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 face 	bl	8004d02 <UART_Transmit_IT>
    return;
 8004766:	e014      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <HAL_UART_IRQHandler+0x51e>
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fb0d 	bl	8004da0 <UART_EndTransmit_IT>
    return;
 8004786:	e004      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
    return;
 8004788:	bf00      	nop
 800478a:	e002      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
      return;
 800478c:	bf00      	nop
 800478e:	e000      	b.n	8004792 <HAL_UART_IRQHandler+0x51e>
      return;
 8004790:	bf00      	nop
  }
}
 8004792:	37e8      	adds	r7, #232	; 0xe8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b090      	sub	sp, #64	; 0x40
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d137      	bne.n	800486c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80047fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fe:	2200      	movs	r2, #0
 8004800:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3314      	adds	r3, #20
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	623b      	str	r3, [r7, #32]
   return(result);
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004818:	63bb      	str	r3, [r7, #56]	; 0x38
 800481a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3314      	adds	r3, #20
 8004820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004822:	633a      	str	r2, [r7, #48]	; 0x30
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e5      	bne.n	8004802 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	60fb      	str	r3, [r7, #12]
   return(result);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004856:	61fa      	str	r2, [r7, #28]
 8004858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	69b9      	ldr	r1, [r7, #24]
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	617b      	str	r3, [r7, #20]
   return(result);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e5      	bne.n	8004836 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800486a:	e002      	b.n	8004872 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800486c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800486e:	f7fb fcb9 	bl	80001e4 <HAL_UART_TxCpltCallback>
}
 8004872:	bf00      	nop
 8004874:	3740      	adds	r7, #64	; 0x40
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ff85 	bl	8004798 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b09c      	sub	sp, #112	; 0x70
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d172      	bne.n	8004998 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	2200      	movs	r2, #0
 80048b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80048da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e5      	bne.n	80048b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3314      	adds	r3, #20
 80048f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	667b      	str	r3, [r7, #100]	; 0x64
 8004904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3314      	adds	r3, #20
 800490a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800490c:	647a      	str	r2, [r7, #68]	; 0x44
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800491a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	623b      	str	r3, [r7, #32]
   return(result);
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004936:	663b      	str	r3, [r7, #96]	; 0x60
 8004938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004940:	633a      	str	r2, [r7, #48]	; 0x30
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800495c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	2b01      	cmp	r3, #1
 8004962:	d119      	bne.n	8004998 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	60fb      	str	r3, [r7, #12]
   return(result);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0310 	bic.w	r3, r3, #16
 800497a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800497c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004984:	61fa      	str	r2, [r7, #28]
 8004986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	69b9      	ldr	r1, [r7, #24]
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	617b      	str	r3, [r7, #20]
   return(result);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	2200      	movs	r2, #0
 800499c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d106      	bne.n	80049b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049aa:	4619      	mov	r1, r3
 80049ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049ae:	f7fb fbdf 	bl	8000170 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049b2:	e002      	b.n	80049ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80049b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049b6:	f7ff fef8 	bl	80047aa <HAL_UART_RxCpltCallback>
}
 80049ba:	bf00      	nop
 80049bc:	3770      	adds	r7, #112	; 0x70
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d108      	bne.n	80049f0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	4619      	mov	r1, r3
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7fb fbc1 	bl	8000170 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049ee:	e002      	b.n	80049f6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f7ff fee3 	bl	80047bc <HAL_UART_RxHalfCpltCallback>
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b21      	cmp	r3, #33	; 0x21
 8004a30:	d108      	bne.n	8004a44 <UART_DMAError+0x46>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a3e:	68b8      	ldr	r0, [r7, #8]
 8004a40:	f000 f8c2 	bl	8004bc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b22      	cmp	r3, #34	; 0x22
 8004a64:	d108      	bne.n	8004a78 <UART_DMAError+0x7a>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a72:	68b8      	ldr	r0, [r7, #8]
 8004a74:	f000 f8cf 	bl	8004c16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7c:	f043 0210 	orr.w	r2, r3, #16
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a84:	68b8      	ldr	r0, [r7, #8]
 8004a86:	f7ff fea2 	bl	80047ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b098      	sub	sp, #96	; 0x60
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2222      	movs	r2, #34	; 0x22
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	4a3e      	ldr	r2, [pc, #248]	; (8004bbc <UART_Start_Receive_DMA+0x128>)
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	4a3d      	ldr	r2, [pc, #244]	; (8004bc0 <UART_Start_Receive_DMA+0x12c>)
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	4a3c      	ldr	r2, [pc, #240]	; (8004bc4 <UART_Start_Receive_DMA+0x130>)
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	2200      	movs	r2, #0
 8004ada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004adc:	f107 0308 	add.w	r3, r7, #8
 8004ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	f7fc f8be 	bl	8000c74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d019      	beq.n	8004b4a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	657b      	str	r3, [r7, #84]	; 0x54
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3314      	adds	r3, #20
 8004b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b6a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b94:	653b      	str	r3, [r7, #80]	; 0x50
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8004ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6a39      	ldr	r1, [r7, #32]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e5      	bne.n	8004b7e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3760      	adds	r7, #96	; 0x60
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	08004897 	.word	0x08004897
 8004bc0:	080049c3 	.word	0x080049c3
 8004bc4:	080049ff 	.word	0x080049ff

08004bc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	; 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	61ba      	str	r2, [r7, #24]
 8004bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6979      	ldr	r1, [r7, #20]
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004c0c:	bf00      	nop
 8004c0e:	3724      	adds	r7, #36	; 0x24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b095      	sub	sp, #84	; 0x54
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3e:	643a      	str	r2, [r7, #64]	; 0x40
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d119      	bne.n	8004cc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f023 0310 	bic.w	r3, r3, #16
 8004ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cae:	61ba      	str	r2, [r7, #24]
 8004cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6979      	ldr	r1, [r7, #20]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	613b      	str	r3, [r7, #16]
   return(result);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e5      	bne.n	8004c8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cd0:	bf00      	nop
 8004cd2:	3754      	adds	r7, #84	; 0x54
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fd6a 	bl	80047ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b21      	cmp	r3, #33	; 0x21
 8004d14:	d13e      	bne.n	8004d94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1e:	d114      	bne.n	8004d4a <UART_Transmit_IT+0x48>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d110      	bne.n	8004d4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	621a      	str	r2, [r3, #32]
 8004d48:	e008      	b.n	8004d5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	1c59      	adds	r1, r3, #1
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6211      	str	r1, [r2, #32]
 8004d54:	781a      	ldrb	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10f      	bne.n	8004d90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fb fa0f 	bl	80001e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b22      	cmp	r3, #34	; 0x22
 8004de2:	f040 80ae 	bne.w	8004f42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d117      	bne.n	8004e20 <UART_Receive_IT+0x50>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d113      	bne.n	8004e20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	1c9a      	adds	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1e:	e026      	b.n	8004e6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e32:	d007      	beq.n	8004e44 <UART_Receive_IT+0x74>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <UART_Receive_IT+0x82>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e008      	b.n	8004e64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d15d      	bne.n	8004f3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0220 	bic.w	r2, r2, #32
 8004e90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d135      	bne.n	8004f34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f023 0310 	bic.w	r3, r3, #16
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	623a      	str	r2, [r7, #32]
 8004ef0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	69f9      	ldr	r1, [r7, #28]
 8004ef4:	6a3a      	ldr	r2, [r7, #32]
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d10a      	bne.n	8004f26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fb f91f 	bl	8000170 <HAL_UARTEx_RxEventCallback>
 8004f32:	e002      	b.n	8004f3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fc38 	bl	80047aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e002      	b.n	8004f44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e000      	b.n	8004f44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
  }
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3730      	adds	r7, #48	; 0x30
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f86:	f023 030c 	bic.w	r3, r3, #12
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a2c      	ldr	r2, [pc, #176]	; (8005060 <UART_SetConfig+0x114>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d103      	bne.n	8004fbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7fe fb6a 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	e002      	b.n	8004fc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fe fb52 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009a      	lsls	r2, r3, #2
 8004fcc:	441a      	add	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	4a22      	ldr	r2, [pc, #136]	; (8005064 <UART_SetConfig+0x118>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	0119      	lsls	r1, r3, #4
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009a      	lsls	r2, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <UART_SetConfig+0x118>)
 8004ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	2064      	movs	r0, #100	; 0x64
 8005002:	fb00 f303 	mul.w	r3, r0, r3
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	3332      	adds	r3, #50	; 0x32
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <UART_SetConfig+0x118>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005018:	4419      	add	r1, r3
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009a      	lsls	r2, r3, #2
 8005024:	441a      	add	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <UART_SetConfig+0x118>)
 8005032:	fba3 0302 	umull	r0, r3, r3, r2
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2064      	movs	r0, #100	; 0x64
 800503a:	fb00 f303 	mul.w	r3, r0, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	3332      	adds	r3, #50	; 0x32
 8005044:	4a07      	ldr	r2, [pc, #28]	; (8005064 <UART_SetConfig+0x118>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	f003 020f 	and.w	r2, r3, #15
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	440a      	add	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40013800 	.word	0x40013800
 8005064:	51eb851f 	.word	0x51eb851f

08005068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	4638      	mov	r0, r7
 8005072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005092:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005096:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050b6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	4013      	ands	r3, r2
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr

080050fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	4638      	mov	r0, r7
 8005104:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005134:	b480      	push	{r7}
 8005136:	b09d      	sub	sp, #116	; 0x74
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	78db      	ldrb	r3, [r3, #3]
 8005162:	2b03      	cmp	r3, #3
 8005164:	d81f      	bhi.n	80051a6 <USB_ActivateEndpoint+0x72>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <USB_ActivateEndpoint+0x38>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	0800517d 	.word	0x0800517d
 8005170:	08005199 	.word	0x08005199
 8005174:	080051af 	.word	0x080051af
 8005178:	0800518b 	.word	0x0800518b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800517c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005184:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005188:	e012      	b.n	80051b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800518a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800518e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005192:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005196:	e00b      	b.n	80051b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005198:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800519c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80051a4:	e004      	b.n	80051b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80051ac:	e000      	b.n	80051b0 <USB_ActivateEndpoint+0x7c>
      break;
 80051ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800520c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	7b1b      	ldrb	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 8178 	bne.w	8005512 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 8084 	beq.w	8005334 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005236:	b29b      	uxth	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	4413      	add	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	011a      	lsls	r2, r3, #4
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	88db      	ldrh	r3, [r3, #6]
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	b29b      	uxth	r3, r3
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	827b      	strh	r3, [r7, #18]
 800526e:	8a7b      	ldrh	r3, [r7, #18]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01b      	beq.n	80052b0 <USB_ActivateEndpoint+0x17c>
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	823b      	strh	r3, [r7, #16]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	8a3b      	ldrh	r3, [r7, #16]
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	78db      	ldrb	r3, [r3, #3]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d020      	beq.n	80052fa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ce:	81bb      	strh	r3, [r7, #12]
 80052d0:	89bb      	ldrh	r3, [r7, #12]
 80052d2:	f083 0320 	eor.w	r3, r3, #32
 80052d6:	81bb      	strh	r3, [r7, #12]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	89bb      	ldrh	r3, [r7, #12]
 80052e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	8013      	strh	r3, [r2, #0]
 80052f8:	e2d5      	b.n	80058a6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	81fb      	strh	r3, [r7, #14]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	89fb      	ldrh	r3, [r7, #14]
 800531e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]
 8005332:	e2b8      	b.n	80058a6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	633b      	str	r3, [r7, #48]	; 0x30
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	4413      	add	r3, r2
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	011a      	lsls	r2, r3, #4
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	4413      	add	r3, r2
 8005352:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	88db      	ldrh	r3, [r3, #6]
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	b29b      	uxth	r3, r3
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005372:	b29b      	uxth	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	4413      	add	r3, r2
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	011a      	lsls	r2, r3, #4
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	4413      	add	r3, r2
 8005386:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005396:	b29a      	uxth	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b3e      	cmp	r3, #62	; 0x3e
 80053a2:	d91d      	bls.n	80053e0 <USB_ActivateEndpoint+0x2ac>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <USB_ActivateEndpoint+0x28a>
 80053b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ba:	3b01      	subs	r3, #1
 80053bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	029b      	lsls	r3, r3, #10
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	4313      	orrs	r3, r2
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	e026      	b.n	800542e <USB_ActivateEndpoint+0x2fa>
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <USB_ActivateEndpoint+0x2ca>
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e017      	b.n	800542e <USB_ActivateEndpoint+0x2fa>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	66bb      	str	r3, [r7, #104]	; 0x68
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <USB_ActivateEndpoint+0x2e4>
 8005412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005414:	3301      	adds	r3, #1
 8005416:	66bb      	str	r3, [r7, #104]	; 0x68
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005420:	b29b      	uxth	r3, r3
 8005422:	029b      	lsls	r3, r3, #10
 8005424:	b29b      	uxth	r3, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	b29a      	uxth	r2, r3
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	847b      	strh	r3, [r7, #34]	; 0x22
 800543c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800543e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01b      	beq.n	800547e <USB_ActivateEndpoint+0x34a>
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	843b      	strh	r3, [r7, #32]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	8c3b      	ldrh	r3, [r7, #32]
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d124      	bne.n	80054d0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549c:	83bb      	strh	r3, [r7, #28]
 800549e:	8bbb      	ldrh	r3, [r7, #28]
 80054a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054a4:	83bb      	strh	r3, [r7, #28]
 80054a6:	8bbb      	ldrh	r3, [r7, #28]
 80054a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054ac:	83bb      	strh	r3, [r7, #28]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	8bbb      	ldrh	r3, [r7, #28]
 80054ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	8013      	strh	r3, [r2, #0]
 80054ce:	e1ea      	b.n	80058a6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	83fb      	strh	r3, [r7, #30]
 80054e8:	8bfb      	ldrh	r3, [r7, #30]
 80054ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054ee:	83fb      	strh	r3, [r7, #30]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	8bfb      	ldrh	r3, [r7, #30]
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
 8005510:	e1c9      	b.n	80058a6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	78db      	ldrb	r3, [r3, #3]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d11e      	bne.n	8005558 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800554e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]
 8005556:	e01d      	b.n	8005594 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559e:	b29b      	uxth	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a4:	4413      	add	r3, r2
 80055a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	011a      	lsls	r2, r3, #4
 80055ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	891b      	ldrh	r3, [r3, #8]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	b29b      	uxth	r3, r3
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055c6:	801a      	strh	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	657b      	str	r3, [r7, #84]	; 0x54
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d8:	4413      	add	r3, r2
 80055da:	657b      	str	r3, [r7, #84]	; 0x54
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	011a      	lsls	r2, r3, #4
 80055e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055ea:	653b      	str	r3, [r7, #80]	; 0x50
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	895b      	ldrh	r3, [r3, #10]
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 8093 	bne.w	800572c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005616:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800561a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01b      	beq.n	800565a <USB_ActivateEndpoint+0x526>
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005638:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005668:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01b      	beq.n	80056aa <USB_ActivateEndpoint+0x576>
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	877b      	strh	r3, [r7, #58]	; 0x3a
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80056c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80056ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005708:	86fb      	strh	r3, [r7, #54]	; 0x36
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	441a      	add	r2, r3
 8005714:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005726:	b29b      	uxth	r3, r3
 8005728:	8013      	strh	r3, [r2, #0]
 800572a:	e0bc      	b.n	80058a6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800573c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01d      	beq.n	8005784 <USB_ActivateEndpoint+0x650>
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800577c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005794:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01d      	beq.n	80057dc <USB_ActivateEndpoint+0x6a8>
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	441a      	add	r2, r3
 80057c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80057c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d024      	beq.n	800582e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80057fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005802:	f083 0320 	eor.w	r3, r3, #32
 8005806:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	441a      	add	r2, r3
 8005814:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005828:	b29b      	uxth	r3, r3
 800582a:	8013      	strh	r3, [r2, #0]
 800582c:	e01d      	b.n	800586a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005844:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	441a      	add	r2, r3
 8005852:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800585a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005866:	b29b      	uxth	r3, r3
 8005868:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	441a      	add	r2, r3
 800588e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800589a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80058a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3774      	adds	r7, #116	; 0x74
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr

080058b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b08d      	sub	sp, #52	; 0x34
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	7b1b      	ldrb	r3, [r3, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 808e 	bne.w	80059e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d044      	beq.n	800595a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	81bb      	strh	r3, [r7, #12]
 80058de:	89bb      	ldrh	r3, [r7, #12]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01b      	beq.n	8005920 <USB_DeactivateEndpoint+0x6c>
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	817b      	strh	r3, [r7, #10]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	441a      	add	r2, r3
 800590a:	897b      	ldrh	r3, [r7, #10]
 800590c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005936:	813b      	strh	r3, [r7, #8]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	441a      	add	r2, r3
 8005942:	893b      	ldrh	r3, [r7, #8]
 8005944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005954:	b29b      	uxth	r3, r3
 8005956:	8013      	strh	r3, [r2, #0]
 8005958:	e192      	b.n	8005c80 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	827b      	strh	r3, [r7, #18]
 8005968:	8a7b      	ldrh	r3, [r7, #18]
 800596a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01b      	beq.n	80059aa <USB_DeactivateEndpoint+0xf6>
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	823b      	strh	r3, [r7, #16]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	441a      	add	r2, r3
 8005994:	8a3b      	ldrh	r3, [r7, #16]
 8005996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c0:	81fb      	strh	r3, [r7, #14]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	441a      	add	r2, r3
 80059cc:	89fb      	ldrh	r3, [r7, #14]
 80059ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059de:	b29b      	uxth	r3, r3
 80059e0:	8013      	strh	r3, [r2, #0]
 80059e2:	e14d      	b.n	8005c80 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f040 80a5 	bne.w	8005b38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	843b      	strh	r3, [r7, #32]
 80059fc:	8c3b      	ldrh	r3, [r7, #32]
 80059fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01b      	beq.n	8005a3e <USB_DeactivateEndpoint+0x18a>
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1c:	83fb      	strh	r3, [r7, #30]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	8bfb      	ldrh	r3, [r7, #30]
 8005a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	83bb      	strh	r3, [r7, #28]
 8005a4c:	8bbb      	ldrh	r3, [r7, #28]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01b      	beq.n	8005a8e <USB_DeactivateEndpoint+0x1da>
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	837b      	strh	r3, [r7, #26]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	441a      	add	r2, r3
 8005a78:	8b7b      	ldrh	r3, [r7, #26]
 8005a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa4:	833b      	strh	r3, [r7, #24]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	441a      	add	r2, r3
 8005ab0:	8b3b      	ldrh	r3, [r7, #24]
 8005ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005adc:	82fb      	strh	r3, [r7, #22]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	441a      	add	r2, r3
 8005ae8:	8afb      	ldrh	r3, [r7, #22]
 8005aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b14:	82bb      	strh	r3, [r7, #20]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	8abb      	ldrh	r3, [r7, #20]
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]
 8005b36:	e0a3      	b.n	8005c80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01b      	beq.n	8005b88 <USB_DeactivateEndpoint+0x2d4>
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <USB_DeactivateEndpoint+0x324>
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3734      	adds	r7, #52	; 0x34
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b0c2      	sub	sp, #264	; 0x108
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9a:	6018      	str	r0, [r3, #0]
 8005c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	f040 86b7 	bne.w	8006a26 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d908      	bls.n	8005ce6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ce4:	e007      	b.n	8005cf6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	7b1b      	ldrb	r3, [r3, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d13a      	bne.n	8005d7c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6959      	ldr	r1, [r3, #20]
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	88da      	ldrh	r2, [r3, #6]
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d28:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f001 fc9c 	bl	800766a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4413      	add	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	011a      	lsls	r2, r3, #4
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4413      	add	r3, r2
 8005d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	f000 be1f 	b.w	80069ba <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	78db      	ldrb	r3, [r3, #3]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	f040 8462 	bne.w	8006652 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a1a      	ldr	r2, [r3, #32]
 8005d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	f240 83df 	bls.w	800656a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e18:	1ad2      	subs	r2, r2, r3
 8005e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 81c7 	beq.w	80061dc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	633b      	str	r3, [r7, #48]	; 0x30
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d177      	bne.n	8005f5a <USB_EPStartXfer+0x2ce>
 8005e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	4413      	add	r3, r2
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	011a      	lsls	r2, r3, #4
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	2b3e      	cmp	r3, #62	; 0x3e
 8005ebc:	d921      	bls.n	8005f02 <USB_EPStartXfer+0x276>
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <USB_EPStartXfer+0x252>
 8005ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	029b      	lsls	r3, r3, #10
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e050      	b.n	8005fa4 <USB_EPStartXfer+0x318>
 8005f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <USB_EPStartXfer+0x294>
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	e041      	b.n	8005fa4 <USB_EPStartXfer+0x318>
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <USB_EPStartXfer+0x2b4>
 8005f36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4313      	orrs	r3, r2
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e024      	b.n	8005fa4 <USB_EPStartXfer+0x318>
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d11c      	bne.n	8005fa4 <USB_EPStartXfer+0x318>
 8005f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	4413      	add	r3, r2
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30
 8005f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	011a      	lsls	r2, r3, #4
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	4413      	add	r3, r2
 8005f94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	895b      	ldrh	r3, [r3, #10]
 8005fb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6959      	ldr	r1, [r3, #20]
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005fca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005fce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	f001 fb49 	bl	800766a <USB_WritePMA>
            ep->xfer_buff += len;
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe8:	441a      	add	r2, r3
 8005fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d90f      	bls.n	8006032 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006022:	1ad2      	subs	r2, r2, r3
 8006024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	621a      	str	r2, [r3, #32]
 8006030:	e00e      	b.n	8006050 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2200      	movs	r2, #0
 800604e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d177      	bne.n	8006150 <USB_EPStartXfer+0x4c4>
 8006060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800607a:	b29b      	uxth	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	4413      	add	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	011a      	lsls	r2, r3, #4
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	4413      	add	r3, r2
 8006096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b0:	2b3e      	cmp	r3, #62	; 0x3e
 80060b2:	d921      	bls.n	80060f8 <USB_EPStartXfer+0x46c>
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <USB_EPStartXfer+0x448>
 80060ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ce:	3b01      	subs	r3, #1
 80060d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060de:	b29b      	uxth	r3, r3
 80060e0:	029b      	lsls	r3, r3, #10
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	4313      	orrs	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e056      	b.n	80061a6 <USB_EPStartXfer+0x51a>
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <USB_EPStartXfer+0x48a>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610e:	b29a      	uxth	r2, r3
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	e047      	b.n	80061a6 <USB_EPStartXfer+0x51a>
 8006116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d004      	beq.n	8006136 <USB_EPStartXfer+0x4aa>
 800612c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006130:	3301      	adds	r3, #1
 8006132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29a      	uxth	r2, r3
 800613c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006140:	b29b      	uxth	r3, r3
 8006142:	029b      	lsls	r3, r3, #10
 8006144:	b29b      	uxth	r3, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	b29a      	uxth	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	801a      	strh	r2, [r3, #0]
 800614e:	e02a      	b.n	80061a6 <USB_EPStartXfer+0x51a>
 8006150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	785b      	ldrb	r3, [r3, #1]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d122      	bne.n	80061a6 <USB_EPStartXfer+0x51a>
 8006160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	623b      	str	r3, [r7, #32]
 800616c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	4413      	add	r3, r2
 8006182:	623b      	str	r3, [r7, #32]
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	011a      	lsls	r2, r3, #4
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	4413      	add	r3, r2
 8006196:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	891b      	ldrh	r3, [r3, #8]
 80061b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6959      	ldr	r1, [r3, #20]
 80061c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061d4:	6800      	ldr	r0, [r0, #0]
 80061d6:	f001 fa48 	bl	800766a <USB_WritePMA>
 80061da:	e3ee      	b.n	80069ba <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d177      	bne.n	80062dc <USB_EPStartXfer+0x650>
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006206:	b29b      	uxth	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620c:	4413      	add	r3, r2
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	011a      	lsls	r2, r3, #4
 800621e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006220:	4413      	add	r3, r2
 8006222:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
 8006228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006232:	b29a      	uxth	r2, r3
 8006234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623c:	2b3e      	cmp	r3, #62	; 0x3e
 800623e:	d921      	bls.n	8006284 <USB_EPStartXfer+0x5f8>
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2b00      	cmp	r3, #0
 8006254:	d104      	bne.n	8006260 <USB_EPStartXfer+0x5d4>
 8006256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800625a:	3b01      	subs	r3, #1
 800625c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29a      	uxth	r2, r3
 8006266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800626a:	b29b      	uxth	r3, r3
 800626c:	029b      	lsls	r3, r3, #10
 800626e:	b29b      	uxth	r3, r3
 8006270:	4313      	orrs	r3, r2
 8006272:	b29b      	uxth	r3, r3
 8006274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627c:	b29a      	uxth	r2, r3
 800627e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	e056      	b.n	8006332 <USB_EPStartXfer+0x6a6>
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <USB_EPStartXfer+0x616>
 800628c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629a:	b29a      	uxth	r2, r3
 800629c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	e047      	b.n	8006332 <USB_EPStartXfer+0x6a6>
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <USB_EPStartXfer+0x636>
 80062b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062bc:	3301      	adds	r3, #1
 80062be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80062c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	029b      	lsls	r3, r3, #10
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	4313      	orrs	r3, r2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	e02a      	b.n	8006332 <USB_EPStartXfer+0x6a6>
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d122      	bne.n	8006332 <USB_EPStartXfer+0x6a6>
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	653b      	str	r3, [r7, #80]	; 0x50
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006306:	b29b      	uxth	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800630c:	4413      	add	r3, r2
 800630e:	653b      	str	r3, [r7, #80]	; 0x50
 8006310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	011a      	lsls	r2, r3, #4
 800631e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006320:	4413      	add	r3, r2
 8006322:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632c:	b29a      	uxth	r2, r3
 800632e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006330:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	891b      	ldrh	r3, [r3, #8]
 800633e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6959      	ldr	r1, [r3, #20]
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006352:	b29b      	uxth	r3, r3
 8006354:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006358:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800635c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006360:	6800      	ldr	r0, [r0, #0]
 8006362:	f001 f982 	bl	800766a <USB_WritePMA>
            ep->xfer_buff += len;
 8006366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006376:	441a      	add	r2, r3
 8006378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6a1a      	ldr	r2, [r3, #32]
 8006390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	429a      	cmp	r2, r3
 800639e:	d90f      	bls.n	80063c0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80063a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b0:	1ad2      	subs	r2, r2, r3
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	621a      	str	r2, [r3, #32]
 80063be:	e00e      	b.n	80063de <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80063d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2200      	movs	r2, #0
 80063dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	643b      	str	r3, [r7, #64]	; 0x40
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d177      	bne.n	80064ea <USB_EPStartXfer+0x85e>
 80063fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	63bb      	str	r3, [r7, #56]	; 0x38
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006414:	b29b      	uxth	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	4413      	add	r3, r2
 800641c:	63bb      	str	r3, [r7, #56]	; 0x38
 800641e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	011a      	lsls	r2, r3, #4
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	4413      	add	r3, r2
 8006430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006440:	b29a      	uxth	r2, r3
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644a:	2b3e      	cmp	r3, #62	; 0x3e
 800644c:	d921      	bls.n	8006492 <USB_EPStartXfer+0x806>
 800644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006452:	095b      	lsrs	r3, r3, #5
 8006454:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <USB_EPStartXfer+0x7e2>
 8006464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006468:	3b01      	subs	r3, #1
 800646a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29a      	uxth	r2, r3
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	b29b      	uxth	r3, r3
 800647a:	029b      	lsls	r3, r3, #10
 800647c:	b29b      	uxth	r3, r3
 800647e:	4313      	orrs	r3, r2
 8006480:	b29b      	uxth	r3, r3
 8006482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648a:	b29a      	uxth	r2, r3
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	e050      	b.n	8006534 <USB_EPStartXfer+0x8a8>
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <USB_EPStartXfer+0x824>
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	e041      	b.n	8006534 <USB_EPStartXfer+0x8a8>
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <USB_EPStartXfer+0x844>
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	3301      	adds	r3, #1
 80064cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064da:	b29b      	uxth	r3, r3
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	e024      	b.n	8006534 <USB_EPStartXfer+0x8a8>
 80064ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d11c      	bne.n	8006534 <USB_EPStartXfer+0x8a8>
 80064fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006508:	b29b      	uxth	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650e:	4413      	add	r3, r2
 8006510:	643b      	str	r3, [r7, #64]	; 0x40
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	011a      	lsls	r2, r3, #4
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	4413      	add	r3, r2
 8006524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652e:	b29a      	uxth	r2, r3
 8006530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006532:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	895b      	ldrh	r3, [r3, #10]
 8006540:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6959      	ldr	r1, [r3, #20]
 8006550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006554:	b29b      	uxth	r3, r3
 8006556:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800655a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800655e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006562:	6800      	ldr	r0, [r0, #0]
 8006564:	f001 f881 	bl	800766a <USB_WritePMA>
 8006568:	e227      	b.n	80069ba <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800659c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80065a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f6:	4413      	add	r3, r2
 80065f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	011a      	lsls	r2, r3, #4
 8006608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660a:	4413      	add	r3, r2
 800660c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006610:	65bb      	str	r3, [r7, #88]	; 0x58
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	b29a      	uxth	r2, r3
 8006618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800661a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	891b      	ldrh	r3, [r3, #8]
 8006628:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800662c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6959      	ldr	r1, [r3, #20]
 8006638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663c:	b29b      	uxth	r3, r3
 800663e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006642:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006646:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800664a:	6800      	ldr	r0, [r0, #0]
 800664c:	f001 f80d 	bl	800766a <USB_WritePMA>
 8006650:	e1b3      	b.n	80069ba <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6a1a      	ldr	r2, [r3, #32]
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006662:	1ad2      	subs	r2, r2, r3
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80c6 	beq.w	8006824 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	673b      	str	r3, [r7, #112]	; 0x70
 80066a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d177      	bne.n	80067a4 <USB_EPStartXfer+0xb18>
 80066b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d4:	4413      	add	r3, r2
 80066d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	011a      	lsls	r2, r3, #4
 80066e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ee:	667b      	str	r3, [r7, #100]	; 0x64
 80066f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006704:	2b3e      	cmp	r3, #62	; 0x3e
 8006706:	d921      	bls.n	800674c <USB_EPStartXfer+0xac0>
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <USB_EPStartXfer+0xa9c>
 800671e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006722:	3b01      	subs	r3, #1
 8006724:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29a      	uxth	r2, r3
 800672e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006732:	b29b      	uxth	r3, r3
 8006734:	029b      	lsls	r3, r3, #10
 8006736:	b29b      	uxth	r3, r3
 8006738:	4313      	orrs	r3, r2
 800673a:	b29b      	uxth	r3, r3
 800673c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006744:	b29a      	uxth	r2, r3
 8006746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006748:	801a      	strh	r2, [r3, #0]
 800674a:	e050      	b.n	80067ee <USB_EPStartXfer+0xb62>
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <USB_EPStartXfer+0xade>
 8006754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006762:	b29a      	uxth	r2, r3
 8006764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	e041      	b.n	80067ee <USB_EPStartXfer+0xb62>
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <USB_EPStartXfer+0xafe>
 8006780:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006784:	3301      	adds	r3, #1
 8006786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800678a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29a      	uxth	r2, r3
 8006790:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006794:	b29b      	uxth	r3, r3
 8006796:	029b      	lsls	r3, r3, #10
 8006798:	b29b      	uxth	r3, r3
 800679a:	4313      	orrs	r3, r2
 800679c:	b29a      	uxth	r2, r3
 800679e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	e024      	b.n	80067ee <USB_EPStartXfer+0xb62>
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d11c      	bne.n	80067ee <USB_EPStartXfer+0xb62>
 80067b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067c8:	4413      	add	r3, r2
 80067ca:	673b      	str	r3, [r7, #112]	; 0x70
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	011a      	lsls	r2, r3, #4
 80067da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067dc:	4413      	add	r3, r2
 80067de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	895b      	ldrh	r3, [r3, #10]
 80067fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6959      	ldr	r1, [r3, #20]
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680e:	b29b      	uxth	r3, r3
 8006810:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006814:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006818:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f000 ff24 	bl	800766a <USB_WritePMA>
 8006822:	e0ca      	b.n	80069ba <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d177      	bne.n	8006924 <USB_EPStartXfer+0xc98>
 8006834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684e:	b29b      	uxth	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006854:	4413      	add	r3, r2
 8006856:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	011a      	lsls	r2, r3, #4
 8006866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006868:	4413      	add	r3, r2
 800686a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800686e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800687a:	b29a      	uxth	r2, r3
 800687c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006884:	2b3e      	cmp	r3, #62	; 0x3e
 8006886:	d921      	bls.n	80068cc <USB_EPStartXfer+0xc40>
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	2b00      	cmp	r3, #0
 800689c:	d104      	bne.n	80068a8 <USB_EPStartXfer+0xc1c>
 800689e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068a2:	3b01      	subs	r3, #1
 80068a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	029b      	lsls	r3, r3, #10
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4313      	orrs	r3, r2
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	e05c      	b.n	8006986 <USB_EPStartXfer+0xcfa>
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <USB_EPStartXfer+0xc5e>
 80068d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	e04d      	b.n	8006986 <USB_EPStartXfer+0xcfa>
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <USB_EPStartXfer+0xc7e>
 8006900:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006904:	3301      	adds	r3, #1
 8006906:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800690a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b29a      	uxth	r2, r3
 8006910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006914:	b29b      	uxth	r3, r3
 8006916:	029b      	lsls	r3, r3, #10
 8006918:	b29b      	uxth	r3, r3
 800691a:	4313      	orrs	r3, r2
 800691c:	b29a      	uxth	r2, r3
 800691e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e030      	b.n	8006986 <USB_EPStartXfer+0xcfa>
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d128      	bne.n	8006986 <USB_EPStartXfer+0xcfa>
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006950:	b29b      	uxth	r3, r3
 8006952:	461a      	mov	r2, r3
 8006954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006958:	4413      	add	r3, r2
 800695a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800695e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	011a      	lsls	r2, r3, #4
 800696c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006970:	4413      	add	r3, r2
 8006972:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697e:	b29a      	uxth	r2, r3
 8006980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006984:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	891b      	ldrh	r3, [r3, #8]
 8006992:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6959      	ldr	r1, [r3, #20]
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069b4:	6800      	ldr	r0, [r0, #0]
 80069b6:	f000 fe58 	bl	800766a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	817b      	strh	r3, [r7, #10]
 80069e2:	897b      	ldrh	r3, [r7, #10]
 80069e4:	f083 0310 	eor.w	r3, r3, #16
 80069e8:	817b      	strh	r3, [r7, #10]
 80069ea:	897b      	ldrh	r3, [r7, #10]
 80069ec:	f083 0320 	eor.w	r3, r3, #32
 80069f0:	817b      	strh	r3, [r7, #10]
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	897b      	ldrh	r3, [r7, #10]
 8006a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	8013      	strh	r3, [r2, #0]
 8006a22:	f000 bcde 	b.w	80073e2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	7b1b      	ldrb	r3, [r3, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 80bb 	bne.w	8006bae <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d917      	bls.n	8006a84 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699a      	ldr	r2, [r3, #24]
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	619a      	str	r2, [r3, #24]
 8006a82:	e00e      	b.n	8006aa2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	011a      	lsls	r2, r3, #4
 8006ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ade:	4413      	add	r3, r2
 8006ae0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b00:	2b3e      	cmp	r3, #62	; 0x3e
 8006b02:	d924      	bls.n	8006b4e <USB_EPStartXfer+0xec2>
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <USB_EPStartXfer+0xe98>
 8006b1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	029b      	lsls	r3, r3, #10
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	4313      	orrs	r3, r2
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	f000 bc10 	b.w	800736e <USB_EPStartXfer+0x16e2>
 8006b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10c      	bne.n	8006b70 <USB_EPStartXfer+0xee4>
 8006b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b6c:	801a      	strh	r2, [r3, #0]
 8006b6e:	e3fe      	b.n	800736e <USB_EPStartXfer+0x16e2>
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <USB_EPStartXfer+0xf04>
 8006b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	029b      	lsls	r3, r3, #10
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006baa:	801a      	strh	r2, [r3, #0]
 8006bac:	e3df      	b.n	800736e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	78db      	ldrb	r3, [r3, #3]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	f040 8218 	bne.w	8006ff0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 809d 	bne.w	8006d0c <USB_EPStartXfer+0x1080>
 8006bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	011a      	lsls	r2, r3, #4
 8006c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c0e:	4413      	add	r3, r2
 8006c10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b3e      	cmp	r3, #62	; 0x3e
 8006c3a:	d92b      	bls.n	8006c94 <USB_EPStartXfer+0x1008>
 8006c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d104      	bne.n	8006c6c <USB_EPStartXfer+0xfe0>
 8006c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c66:	3b01      	subs	r3, #1
 8006c68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	029b      	lsls	r3, r3, #10
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	e070      	b.n	8006d76 <USB_EPStartXfer+0x10ea>
 8006c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10c      	bne.n	8006cbe <USB_EPStartXfer+0x1032>
 8006ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e05b      	b.n	8006d76 <USB_EPStartXfer+0x10ea>
 8006cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <USB_EPStartXfer+0x1062>
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	3301      	adds	r3, #1
 8006cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	029b      	lsls	r3, r3, #10
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	e034      	b.n	8006d76 <USB_EPStartXfer+0x10ea>
 8006d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d12c      	bne.n	8006d76 <USB_EPStartXfer+0x10ea>
 8006d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d40:	4413      	add	r3, r2
 8006d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	011a      	lsls	r2, r3, #4
 8006d54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d58:	4413      	add	r3, r2
 8006d5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f040 809d 	bne.w	8006ed0 <USB_EPStartXfer+0x1244>
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	011a      	lsls	r2, r3, #4
 8006dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8006dfe:	d92b      	bls.n	8006e58 <USB_EPStartXfer+0x11cc>
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <USB_EPStartXfer+0x11a4>
 8006e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	029b      	lsls	r3, r3, #10
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4313      	orrs	r3, r2
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e54:	801a      	strh	r2, [r3, #0]
 8006e56:	e069      	b.n	8006f2c <USB_EPStartXfer+0x12a0>
 8006e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10c      	bne.n	8006e82 <USB_EPStartXfer+0x11f6>
 8006e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e054      	b.n	8006f2c <USB_EPStartXfer+0x12a0>
 8006e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <USB_EPStartXfer+0x1226>
 8006ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eac:	3301      	adds	r3, #1
 8006eae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ecc:	801a      	strh	r2, [r3, #0]
 8006ece:	e02d      	b.n	8006f2c <USB_EPStartXfer+0x12a0>
 8006ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d125      	bne.n	8006f2c <USB_EPStartXfer+0x12a0>
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	011a      	lsls	r2, r3, #4
 8006f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f0e:	4413      	add	r3, r2
 8006f10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f2a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 8218 	beq.w	800736e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <USB_EPStartXfer+0x12ea>
 8006f6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10d      	bne.n	8006f92 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f040 81f5 	bne.w	800736e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 81ee 	bne.w	800736e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	441a      	add	r2, r3
 8006fd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8013      	strh	r3, [r2, #0]
 8006fee:	e1be      	b.n	800736e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	78db      	ldrb	r3, [r3, #3]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	f040 81b4 	bne.w	800736a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	429a      	cmp	r2, r3
 800701c:	d917      	bls.n	800704e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800701e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800702e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	619a      	str	r2, [r3, #24]
 800704c:	e00e      	b.n	800706c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800704e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2200      	movs	r2, #0
 800706a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800706c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 8085 	bne.w	8007188 <USB_EPStartXfer+0x14fc>
 800707e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709a:	b29b      	uxth	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070a2:	4413      	add	r3, r2
 80070a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	011a      	lsls	r2, r3, #4
 80070b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070ba:	4413      	add	r3, r2
 80070bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070dc:	2b3e      	cmp	r3, #62	; 0x3e
 80070de:	d923      	bls.n	8007128 <USB_EPStartXfer+0x149c>
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <USB_EPStartXfer+0x1474>
 80070f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070fa:	3b01      	subs	r3, #1
 80070fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29a      	uxth	r2, r3
 8007108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800710c:	b29b      	uxth	r3, r3
 800710e:	029b      	lsls	r3, r3, #10
 8007110:	b29b      	uxth	r3, r3
 8007112:	4313      	orrs	r3, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	e060      	b.n	80071ea <USB_EPStartXfer+0x155e>
 8007128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10c      	bne.n	800714a <USB_EPStartXfer+0x14be>
 8007130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007140:	b29a      	uxth	r2, r3
 8007142:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007146:	801a      	strh	r2, [r3, #0]
 8007148:	e04f      	b.n	80071ea <USB_EPStartXfer+0x155e>
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <USB_EPStartXfer+0x14de>
 8007160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007164:	3301      	adds	r3, #1
 8007166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800716a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29a      	uxth	r2, r3
 8007172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007176:	b29b      	uxth	r3, r3
 8007178:	029b      	lsls	r3, r3, #10
 800717a:	b29b      	uxth	r3, r3
 800717c:	4313      	orrs	r3, r2
 800717e:	b29a      	uxth	r2, r3
 8007180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007184:	801a      	strh	r2, [r3, #0]
 8007186:	e030      	b.n	80071ea <USB_EPStartXfer+0x155e>
 8007188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d128      	bne.n	80071ea <USB_EPStartXfer+0x155e>
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	461a      	mov	r2, r3
 80071b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071bc:	4413      	add	r3, r2
 80071be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80071c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	011a      	lsls	r2, r3, #4
 80071d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071d4:	4413      	add	r3, r2
 80071d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 8085 	bne.w	8007314 <USB_EPStartXfer+0x1688>
 800720a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007226:	b29b      	uxth	r3, r3
 8007228:	461a      	mov	r2, r3
 800722a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800722e:	4413      	add	r3, r2
 8007230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	011a      	lsls	r2, r3, #4
 8007242:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007246:	4413      	add	r3, r2
 8007248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800724c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800725c:	b29a      	uxth	r2, r3
 800725e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007268:	2b3e      	cmp	r3, #62	; 0x3e
 800726a:	d923      	bls.n	80072b4 <USB_EPStartXfer+0x1628>
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007270:	095b      	lsrs	r3, r3, #5
 8007272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727a:	f003 031f 	and.w	r3, r3, #31
 800727e:	2b00      	cmp	r3, #0
 8007280:	d104      	bne.n	800728c <USB_EPStartXfer+0x1600>
 8007282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007286:	3b01      	subs	r3, #1
 8007288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800728c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29a      	uxth	r2, r3
 8007294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007298:	b29b      	uxth	r3, r3
 800729a:	029b      	lsls	r3, r3, #10
 800729c:	b29b      	uxth	r3, r3
 800729e:	4313      	orrs	r3, r2
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	e05c      	b.n	800736e <USB_EPStartXfer+0x16e2>
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10c      	bne.n	80072d6 <USB_EPStartXfer+0x164a>
 80072bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	e04b      	b.n	800736e <USB_EPStartXfer+0x16e2>
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <USB_EPStartXfer+0x166a>
 80072ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072f0:	3301      	adds	r3, #1
 80072f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007302:	b29b      	uxth	r3, r3
 8007304:	029b      	lsls	r3, r3, #10
 8007306:	b29b      	uxth	r3, r3
 8007308:	4313      	orrs	r3, r2
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e02c      	b.n	800736e <USB_EPStartXfer+0x16e2>
 8007314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d124      	bne.n	800736e <USB_EPStartXfer+0x16e2>
 8007324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007332:	b29b      	uxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800733a:	4413      	add	r3, r2
 800733c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	011a      	lsls	r2, r3, #4
 800734e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007352:	4413      	add	r3, r2
 8007354:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007360:	b29a      	uxth	r2, r3
 8007362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007366:	801a      	strh	r2, [r3, #0]
 8007368:	e001      	b.n	800736e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e03a      	b.n	80073e4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800736e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007394:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007398:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800739c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80073a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80073a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80073b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	441a      	add	r2, r3
 80073ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80073ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073de:	b29b      	uxth	r3, r3
 80073e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d020      	beq.n	8007442 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007416:	81bb      	strh	r3, [r7, #12]
 8007418:	89bb      	ldrh	r3, [r7, #12]
 800741a:	f083 0310 	eor.w	r3, r3, #16
 800741e:	81bb      	strh	r3, [r7, #12]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	441a      	add	r2, r3
 800742a:	89bb      	ldrh	r3, [r7, #12]
 800742c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007430:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743c:	b29b      	uxth	r3, r3
 800743e:	8013      	strh	r3, [r2, #0]
 8007440:	e01f      	b.n	8007482 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007458:	81fb      	strh	r3, [r7, #14]
 800745a:	89fb      	ldrh	r3, [r7, #14]
 800745c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007460:	81fb      	strh	r3, [r7, #14]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	441a      	add	r2, r3
 800746c:	89fb      	ldrh	r3, [r7, #14]
 800746e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747e:	b29b      	uxth	r3, r3
 8007480:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	bc80      	pop	{r7}
 800748c:	4770      	bx	lr

0800748e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800748e:	b480      	push	{r7}
 8007490:	b087      	sub	sp, #28
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	7b1b      	ldrb	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 809d 	bne.w	80075dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d04c      	beq.n	8007544 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	823b      	strh	r3, [r7, #16]
 80074b8:	8a3b      	ldrh	r3, [r7, #16]
 80074ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d01b      	beq.n	80074fa <USB_EPClearStall+0x6c>
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d8:	81fb      	strh	r3, [r7, #14]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	441a      	add	r2, r3
 80074e4:	89fb      	ldrh	r3, [r7, #14]
 80074e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	78db      	ldrb	r3, [r3, #3]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d06c      	beq.n	80075dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007518:	81bb      	strh	r3, [r7, #12]
 800751a:	89bb      	ldrh	r3, [r7, #12]
 800751c:	f083 0320 	eor.w	r3, r3, #32
 8007520:	81bb      	strh	r3, [r7, #12]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	441a      	add	r2, r3
 800752c:	89bb      	ldrh	r3, [r7, #12]
 800752e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753e:	b29b      	uxth	r3, r3
 8007540:	8013      	strh	r3, [r2, #0]
 8007542:	e04b      	b.n	80075dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	82fb      	strh	r3, [r7, #22]
 8007552:	8afb      	ldrh	r3, [r7, #22]
 8007554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01b      	beq.n	8007594 <USB_EPClearStall+0x106>
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	82bb      	strh	r3, [r7, #20]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	8abb      	ldrh	r3, [r7, #20]
 8007580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800758c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007590:	b29b      	uxth	r3, r3
 8007592:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075aa:	827b      	strh	r3, [r7, #18]
 80075ac:	8a7b      	ldrh	r3, [r7, #18]
 80075ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075b2:	827b      	strh	r3, [r7, #18]
 80075b4:	8a7b      	ldrh	r3, [r7, #18]
 80075b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075ba:	827b      	strh	r3, [r7, #18]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	441a      	add	r2, r3
 80075c6:	8a7b      	ldrh	r3, [r7, #18]
 80075c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d8:	b29b      	uxth	r3, r3
 80075da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2280      	movs	r2, #128	; 0x80
 80075fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr

0800760e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	bc80      	pop	{r7}
 8007620:	4770      	bx	lr

08007622 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr

08007636 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007644:	b29b      	uxth	r3, r3
 8007646:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007648:	68fb      	ldr	r3, [r7, #12]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr

08007654 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800766a:	b480      	push	{r7}
 800766c:	b08b      	sub	sp, #44	; 0x2c
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	4611      	mov	r1, r2
 8007676:	461a      	mov	r2, r3
 8007678:	460b      	mov	r3, r1
 800767a:	80fb      	strh	r3, [r7, #6]
 800767c:	4613      	mov	r3, r2
 800767e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007680:	88bb      	ldrh	r3, [r7, #4]
 8007682:	3301      	adds	r3, #1
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007690:	88fb      	ldrh	r3, [r7, #6]
 8007692:	005a      	lsls	r2, r3, #1
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800769c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
 80076a2:	e01e      	b.n	80076e2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	3301      	adds	r3, #1
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	b21a      	sxth	r2, r3
 80076b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	b21b      	sxth	r3, r3
 80076bc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	8a7a      	ldrh	r2, [r7, #18]
 80076c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	3302      	adds	r3, #2
 80076c8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	3302      	adds	r3, #2
 80076ce:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	3301      	adds	r3, #1
 80076d4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	3301      	adds	r3, #1
 80076da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	3b01      	subs	r3, #1
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1dd      	bne.n	80076a4 <USB_WritePMA+0x3a>
  }
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	372c      	adds	r7, #44	; 0x2c
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b08b      	sub	sp, #44	; 0x2c
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4611      	mov	r1, r2
 8007700:	461a      	mov	r2, r3
 8007702:	460b      	mov	r3, r1
 8007704:	80fb      	strh	r3, [r7, #6]
 8007706:	4613      	mov	r3, r2
 8007708:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800770a:	88bb      	ldrh	r3, [r7, #4]
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	b29b      	uxth	r3, r3
 8007710:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	005a      	lsls	r2, r3, #1
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007726:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
 800772c:	e01b      	b.n	8007766 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	3302      	adds	r3, #2
 800773a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	b2da      	uxtb	r2, r3
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	0a1b      	lsrs	r3, r3, #8
 800774e:	b2da      	uxtb	r2, r3
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	3301      	adds	r3, #1
 8007758:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	3302      	adds	r3, #2
 800775e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	3b01      	subs	r3, #1
 8007764:	627b      	str	r3, [r7, #36]	; 0x24
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e0      	bne.n	800772e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800776c:	88bb      	ldrh	r3, [r7, #4]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	701a      	strb	r2, [r3, #0]
  }
}
 8007788:	bf00      	nop
 800778a:	372c      	adds	r7, #44	; 0x2c
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr

08007792 <CRC16>:
 * Computes the CRC value of a certain data frame and returns it
 * @param data ptr to the data buffer
 * @param len number of bytes for the CRC to be calculated for
 * @return CRC byte value
 */
static uint16_t CRC16(uint8_t *data, uint16_t len) {
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	807b      	strh	r3, [r7, #2]
	uint16_t CRC = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 80077a2:	2300      	movs	r3, #0
 80077a4:	81bb      	strh	r3, [r7, #12]
 80077a6:	e00a      	b.n	80077be <CRC16+0x2c>
		CRC += data[x];
 80077a8:	89bb      	ldrh	r3, [r7, #12]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	89fb      	ldrh	r3, [r7, #14]
 80077b4:	4413      	add	r3, r2
 80077b6:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 80077b8:	89bb      	ldrh	r3, [r7, #12]
 80077ba:	3301      	adds	r3, #1
 80077bc:	81bb      	strh	r3, [r7, #12]
 80077be:	89ba      	ldrh	r2, [r7, #12]
 80077c0:	887b      	ldrh	r3, [r7, #2]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d3f0      	bcc.n	80077a8 <CRC16+0x16>
	}
	return CRC;
 80077c6:	89fb      	ldrh	r3, [r7, #14]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr

080077d2 <SbW_Init>:

void SbW_Init(SbW_Protocol_t *S) {
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
	S->MessageFifo.Fifo_Size = S->Fifo_Buffer_Size / S->Frame_Len;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8b9b      	ldrh	r3, [r3, #28]
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	785b      	ldrb	r3, [r3, #1]
 80077e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	825a      	strh	r2, [r3, #18]
	fifo_init(&S->MessageFifo);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	330c      	adds	r3, #12
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7f8 ffdd 	bl	80007b2 <fifo_init>
	S->Mutex = 0;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <SbW_Request_Received_CB>:

void SbW_Request_Received_CB(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
	uint8_t NoReply = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]
	uint16_t CRC_Result = CRC16(data, len - 2);
 800781a:	88fb      	ldrh	r3, [r7, #6]
 800781c:	3b02      	subs	r3, #2
 800781e:	b29b      	uxth	r3, r3
 8007820:	4619      	mov	r1, r3
 8007822:	68b8      	ldr	r0, [r7, #8]
 8007824:	f7ff ffb5 	bl	8007792 <CRC16>
 8007828:	4603      	mov	r3, r0
 800782a:	82bb      	strh	r3, [r7, #20]

	if (S->RemainingFrames) {
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 80df 	bne.w	80079f6 <SbW_Request_Received_CB+0x1ee>
		return;
	}
	//check the data integrity
	if (CRC_Result
			!= (((uint16_t) data[len - 1] << 8) | (uint16_t) data[len - 2])) {
 8007838:	8aba      	ldrh	r2, [r7, #20]
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	3b01      	subs	r3, #1
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	440b      	add	r3, r1
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	88f9      	ldrh	r1, [r7, #6]
 8007848:	3902      	subs	r1, #2
 800784a:	68b8      	ldr	r0, [r7, #8]
 800784c:	4401      	add	r1, r0
 800784e:	7809      	ldrb	r1, [r1, #0]
 8007850:	430b      	orrs	r3, r1
	if (CRC_Result
 8007852:	429a      	cmp	r2, r3
 8007854:	d003      	beq.n	800785e <SbW_Request_Received_CB+0x56>
		//CRC Error
		S->HW_Interface_t.User_Callback(SbW_ERROR_CRC);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	2001      	movs	r0, #1
 800785c:	4798      	blx	r3
		//return CRC_Result; //ignoring this frame
	}
	//NoError
	S->R_W = data[1] >> 7;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3301      	adds	r3, #1
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	09db      	lsrs	r3, r3, #7
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	b2d9      	uxtb	r1, r3
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	7a93      	ldrb	r3, [r2, #10]
 8007872:	f361 0300 	bfi	r3, r1, #0, #1
 8007876:	7293      	strb	r3, [r2, #10]
	S->CMD = data[1] & 0b01111111;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	3301      	adds	r3, #1
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007882:	b2da      	uxtb	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	72da      	strb	r2, [r3, #11]

	switch (S->CMD) {
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	7adb      	ldrb	r3, [r3, #11]
 800788c:	3b01      	subs	r3, #1
 800788e:	2b05      	cmp	r3, #5
 8007890:	f200 80b3 	bhi.w	80079fa <SbW_Request_Received_CB+0x1f2>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <SbW_Request_Received_CB+0x94>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078b5 	.word	0x080078b5
 80078a0:	0800791f 	.word	0x0800791f
 80078a4:	080079fb 	.word	0x080079fb
 80078a8:	0800794d 	.word	0x0800794d
 80078ac:	080079fb 	.word	0x080079fb
 80078b0:	0800796b 	.word	0x0800796b
	case 0x01: //1st command Get/Set Sampling Frequency
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	2000      	movs	r0, #0
 80078ba:	4798      	blx	r3
		if (S->R_W) //Read
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	7a9b      	ldrb	r3, [r3, #10]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d014      	beq.n	80078f4 <SbW_Request_Received_CB+0xec>
		{
			len = 7;
 80078ca:	2307      	movs	r3, #7
 80078cc:	80fb      	strh	r3, [r7, #6]
			data[2] = 2; //data length =2
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	3302      	adds	r3, #2
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
			data[3] = (uint8_t) (S->SamplingFreq >> 8);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	891b      	ldrh	r3, [r3, #8]
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3303      	adds	r3, #3
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) S->SamplingFreq;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	891a      	ldrh	r2, [r3, #8]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	3304      	adds	r3, #4
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
			data[2] = 0;
		}
		//send back the reply to the PC
		//S->HW_Interface_t.Send_Reply(data, len);
		break;
 80078f2:	e05d      	b.n	80079b0 <SbW_Request_Received_CB+0x1a8>
			len = 5;
 80078f4:	2305      	movs	r3, #5
 80078f6:	80fb      	strh	r3, [r7, #6]
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3303      	adds	r3, #3
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	021b      	lsls	r3, r3, #8
 8007900:	b21a      	sxth	r2, r3
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	3304      	adds	r3, #4
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	b21b      	sxth	r3, r3
 800790a:	4313      	orrs	r3, r2
 800790c:	b21b      	sxth	r3, r3
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	811a      	strh	r2, [r3, #8]
			data[2] = 0;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	3302      	adds	r3, #2
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
		break;
 800791c:	e048      	b.n	80079b0 <SbW_Request_Received_CB+0x1a8>
	case 0x02:		//2nd command Get/Set Frame Length
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	2000      	movs	r0, #0
 8007924:	4798      	blx	r3
		if (S->R_W) //Read
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	7a9b      	ldrb	r3, [r3, #10]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d038      	beq.n	80079a6 <SbW_Request_Received_CB+0x19e>
		{
			len = 6;
 8007934:	2306      	movs	r3, #6
 8007936:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; //data length =1
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	3302      	adds	r3, #2
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
			data[3] = S->Frame_Len; //Get Frame Length
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3303      	adds	r3, #3
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	7852      	ldrb	r2, [r2, #1]
 8007948:	701a      	strb	r2, [r3, #0]
			//data[4]|data[5] for CRC_Result
		}
		break;
 800794a:	e02c      	b.n	80079a6 <SbW_Request_Received_CB+0x19e>

		//get frames from the frame buffer
	case 0x04:
		if (!S->R_W) {
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	7a9b      	ldrb	r3, [r3, #10]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d127      	bne.n	80079aa <SbW_Request_Received_CB+0x1a2>
			NoReply = 1; //means do not issue a standard reply
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
			S->RemainingFrames = data[3];
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	78da      	ldrb	r2, [r3, #3]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			//SbW_TxFrame_processor(S);
		}
		break;
 8007968:	e01f      	b.n	80079aa <SbW_Request_Received_CB+0x1a2>

		//get the frame buffer depth
	case 0x6:
		if (S->R_W) {
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	7a9b      	ldrb	r3, [r3, #10]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01a      	beq.n	80079ae <SbW_Request_Received_CB+0x1a6>
			len = 7;
 8007978:	2307      	movs	r3, #7
 800797a:	80fb      	strh	r3, [r7, #6]
			uint16_t FrameBufferDepth = S->Fifo_Buffer_Size / S->Frame_Len;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8b9b      	ldrh	r3, [r3, #28]
 8007980:	461a      	mov	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	fb92 f3f3 	sdiv	r3, r2, r3
 800798a:	827b      	strh	r3, [r7, #18]
			data[3] = (uint8_t) (FrameBufferDepth >> 8);
 800798c:	8a7b      	ldrh	r3, [r7, #18]
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	b29a      	uxth	r2, r3
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3303      	adds	r3, #3
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) FrameBufferDepth;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	3304      	adds	r3, #4
 800799e:	8a7a      	ldrh	r2, [r7, #18]
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80079a4:	e003      	b.n	80079ae <SbW_Request_Received_CB+0x1a6>
		break;
 80079a6:	bf00      	nop
 80079a8:	e002      	b.n	80079b0 <SbW_Request_Received_CB+0x1a8>
		break;
 80079aa:	bf00      	nop
 80079ac:	e000      	b.n	80079b0 <SbW_Request_Received_CB+0x1a8>
		break;
 80079ae:	bf00      	nop

	default:
		return;
	}

	if (!NoReply) {
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d122      	bne.n	80079fc <SbW_Request_Received_CB+0x1f4>
		CRC_Result = CRC16(data, len - 2);
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	3b02      	subs	r3, #2
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4619      	mov	r1, r3
 80079be:	68b8      	ldr	r0, [r7, #8]
 80079c0:	f7ff fee7 	bl	8007792 <CRC16>
 80079c4:	4603      	mov	r3, r0
 80079c6:	82bb      	strh	r3, [r7, #20]
		data[len - 2] = (uint8_t) (CRC_Result >> 8);
 80079c8:	8abb      	ldrh	r3, [r7, #20]
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	b299      	uxth	r1, r3
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	3b02      	subs	r3, #2
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	4413      	add	r3, r2
 80079d6:	b2ca      	uxtb	r2, r1
 80079d8:	701a      	strb	r2, [r3, #0]
		data[len - 1] = (uint8_t) (CRC_Result);
 80079da:	88fb      	ldrh	r3, [r7, #6]
 80079dc:	3b01      	subs	r3, #1
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	4413      	add	r3, r2
 80079e2:	8aba      	ldrh	r2, [r7, #20]
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	701a      	strb	r2, [r3, #0]
		S->HW_Interface_t.Send_Reply(data, len);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	88fa      	ldrh	r2, [r7, #6]
 80079ee:	4611      	mov	r1, r2
 80079f0:	68b8      	ldr	r0, [r7, #8]
 80079f2:	4798      	blx	r3
 80079f4:	e002      	b.n	80079fc <SbW_Request_Received_CB+0x1f4>
		return;
 80079f6:	bf00      	nop
 80079f8:	e000      	b.n	80079fc <SbW_Request_Received_CB+0x1f4>
		return;
 80079fa:	bf00      	nop
	}
}
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop

08007a04 <SbW_Timer_Callback>:
void SbW_Reply_Transmit(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {

}

void SbW_Timer_Callback(SbW_Protocol_t *S) {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	int16_t Head = fifo_enqueue(&S->MessageFifo);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7f8 fefc 	bl	800080e <fifo_enqueue>
 8007a16:	4603      	mov	r3, r0
 8007a18:	81fb      	strh	r3, [r7, #14]
	//implement the enqueue operation
	memcpy(S->Fifo_Buffer + (Head * S->Frame_Len), S->FrameDataBaseAddress,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	7849      	ldrb	r1, [r1, #1]
 8007a26:	fb01 f202 	mul.w	r2, r1, r2
 8007a2a:	1898      	adds	r0, r3, r2
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6859      	ldr	r1, [r3, #4]
			S->Frame_Len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	785b      	ldrb	r3, [r3, #1]
	memcpy(S->Fifo_Buffer + (Head * S->Frame_Len), S->FrameDataBaseAddress,
 8007a34:	461a      	mov	r2, r3
 8007a36:	f002 f83f 	bl	8009ab8 <memcpy>
	SbW_TxFrame_processor(S);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f804 	bl	8007a48 <SbW_TxFrame_processor>
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <SbW_TxFrame_processor>:

void SbW_TxFrame_processor(SbW_Protocol_t *S) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	if (!fifo_is_empty(&S->MessageFifo) && S->RemainingFrames != 0 && !S->Mutex) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	330c      	adds	r3, #12
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7f8 fec9 	bl	80007ec <fifo_is_empty>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d139      	bne.n	8007ad4 <SbW_TxFrame_processor+0x8c>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d034      	beq.n	8007ad4 <SbW_TxFrame_processor+0x8c>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d12f      	bne.n	8007ad4 <SbW_TxFrame_processor+0x8c>
		S->Mutex = 1;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		int16_t H = fifo_dequeue(&S->MessageFifo);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7f8 fefe 	bl	8000882 <fifo_dequeue>
 8007a86:	4603      	mov	r3, r0
 8007a88:	81fb      	strh	r3, [r7, #14]
		S->RemainingFrames--;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a18      	ldr	r0, [r3, #32]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	7849      	ldrb	r1, [r1, #1]
 8007aaa:	fb01 f202 	mul.w	r2, r1, r2
 8007aae:	1899      	adds	r1, r3, r2
				S->Frame_Len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
		memcpy(S->P_TXBuffer, S->Fifo_Buffer + (H * S->Frame_Len),
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f001 ffff 	bl	8009ab8 <memcpy>
		S->HW_Interface_t.Send_Reply(S->P_TXBuffer, S->Frame_Len);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6a10      	ldr	r0, [r2, #32]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	7852      	ldrb	r2, [r2, #1]
 8007ac6:	b292      	uxth	r2, r2
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4798      	blx	r3
		S->Mutex = 0;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
}
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <SbW_TxCPLt>:

void SbW_TxCPLt(SbW_Protocol_t *S) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	SbW_TxFrame_processor(S);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff ffaf 	bl	8007a48 <SbW_TxFrame_processor>
}
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	7c1b      	ldrb	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d115      	bne.n	8007b36 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b0e:	2202      	movs	r2, #2
 8007b10:	2181      	movs	r1, #129	; 0x81
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 fe39 	bl	800978a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b22:	2202      	movs	r2, #2
 8007b24:	2101      	movs	r1, #1
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 fe2f 	bl	800978a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007b34:	e012      	b.n	8007b5c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b36:	2340      	movs	r3, #64	; 0x40
 8007b38:	2202      	movs	r2, #2
 8007b3a:	2181      	movs	r1, #129	; 0x81
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fe24 	bl	800978a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b48:	2340      	movs	r3, #64	; 0x40
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 fe1b 	bl	800978a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b5c:	2308      	movs	r3, #8
 8007b5e:	2203      	movs	r2, #3
 8007b60:	2182      	movs	r1, #130	; 0x82
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 fe11 	bl	800978a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b72:	f001 ff31 	bl	80099d8 <USBD_static_malloc>
 8007b76:	4602      	mov	r2, r0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e026      	b.n	8007bdc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b94:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7c1b      	ldrb	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fed0 	bl	800996a <USBD_LL_PrepareReceive>
 8007bca:	e007      	b.n	8007bdc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bd2:	2340      	movs	r3, #64	; 0x40
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fec7 	bl	800996a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bf6:	2181      	movs	r1, #129	; 0x81
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 fdec 	bl	80097d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c04:	2101      	movs	r1, #1
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 fde5 	bl	80097d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c14:	2182      	movs	r1, #130	; 0x82
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fddd 	bl	80097d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00e      	beq.n	8007c4a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 fed7 	bl	80099f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c64:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d039      	beq.n	8007cf2 <USBD_CDC_Setup+0x9e>
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	d17f      	bne.n	8007d82 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	88db      	ldrh	r3, [r3, #6]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d029      	beq.n	8007cde <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	b25b      	sxtb	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	da11      	bge.n	8007cb8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007ca0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	88d2      	ldrh	r2, [r2, #6]
 8007ca6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ca8:	6939      	ldr	r1, [r7, #16]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	88db      	ldrh	r3, [r3, #6]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 f9da 	bl	800906a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007cb6:	e06b      	b.n	8007d90 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	785a      	ldrb	r2, [r3, #1]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007cce:	6939      	ldr	r1, [r7, #16]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	88db      	ldrh	r3, [r3, #6]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 f9f5 	bl	80090c6 <USBD_CtlPrepareRx>
      break;
 8007cdc:	e058      	b.n	8007d90 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	7850      	ldrb	r0, [r2, #1]
 8007cea:	2200      	movs	r2, #0
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	4798      	blx	r3
      break;
 8007cf0:	e04e      	b.n	8007d90 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b0b      	cmp	r3, #11
 8007cf8:	d02e      	beq.n	8007d58 <USBD_CDC_Setup+0x104>
 8007cfa:	2b0b      	cmp	r3, #11
 8007cfc:	dc38      	bgt.n	8007d70 <USBD_CDC_Setup+0x11c>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <USBD_CDC_Setup+0xb4>
 8007d02:	2b0a      	cmp	r3, #10
 8007d04:	d014      	beq.n	8007d30 <USBD_CDC_Setup+0xdc>
 8007d06:	e033      	b.n	8007d70 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d107      	bne.n	8007d22 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007d12:	f107 030c 	add.w	r3, r7, #12
 8007d16:	2202      	movs	r2, #2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 f9a5 	bl	800906a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d20:	e02e      	b.n	8007d80 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f936 	bl	8008f96 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d2e:	e027      	b.n	8007d80 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d107      	bne.n	8007d4a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d3a:	f107 030f 	add.w	r3, r7, #15
 8007d3e:	2201      	movs	r2, #1
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 f991 	bl	800906a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d48:	e01a      	b.n	8007d80 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 f922 	bl	8008f96 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d52:	2302      	movs	r3, #2
 8007d54:	75fb      	strb	r3, [r7, #23]
          break;
 8007d56:	e013      	b.n	8007d80 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d00d      	beq.n	8007d7e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 f916 	bl	8008f96 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d6e:	e006      	b.n	8007d7e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 f90f 	bl	8008f96 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d7c:	e000      	b.n	8007d80 <USBD_CDC_Setup+0x12c>
          break;
 8007d7e:	bf00      	nop
      }
      break;
 8007d80:	e006      	b.n	8007d90 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 f906 	bl	8008f96 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d8e:	bf00      	nop
  }

  return ret;
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d03a      	beq.n	8007e36 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	331c      	adds	r3, #28
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d029      	beq.n	8007e2a <USBD_CDC_DataIn+0x90>
 8007dd6:	78fa      	ldrb	r2, [r7, #3]
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	331c      	adds	r3, #28
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	78f9      	ldrb	r1, [r7, #3]
 8007dea:	68b8      	ldr	r0, [r7, #8]
 8007dec:	460b      	mov	r3, r1
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	4403      	add	r3, r0
 8007df6:	3320      	adds	r3, #32
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d110      	bne.n	8007e2a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007e08:	78fa      	ldrb	r2, [r7, #3]
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	440b      	add	r3, r1
 8007e16:	331c      	adds	r3, #28
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e1c:	78f9      	ldrb	r1, [r7, #3]
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2200      	movs	r2, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f001 fd7e 	bl	8009924 <USBD_LL_Transmit>
 8007e28:	e003      	b.n	8007e32 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e000      	b.n	8007e38 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007e36:	2302      	movs	r3, #2
  }
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 fda9 	bl	80099b0 <USBD_LL_GetRxDataSize>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00d      	beq.n	8007e8c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e84:	4611      	mov	r1, r2
 8007e86:	4798      	blx	r3

    return USBD_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e000      	b.n	8007e8e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007e8c:	2302      	movs	r3, #2
  }
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d015      	beq.n	8007edc <USBD_CDC_EP0_RxReady+0x46>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007eb6:	2bff      	cmp	r3, #255	; 0xff
 8007eb8:	d010      	beq.n	8007edc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ec8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ed0:	b292      	uxth	r2, r2
 8007ed2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	22ff      	movs	r2, #255	; 0xff
 8007ed8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2243      	movs	r2, #67	; 0x43
 8007ef4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007ef6:	4b03      	ldr	r3, [pc, #12]	; (8007f04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	200000c4 	.word	0x200000c4

08007f08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2243      	movs	r2, #67	; 0x43
 8007f14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007f16:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	20000080 	.word	0x20000080

08007f28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2243      	movs	r2, #67	; 0x43
 8007f34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f36:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000108 	.word	0x20000108

08007f48 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	220a      	movs	r2, #10
 8007f54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f56:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	2000003c 	.word	0x2000003c

08007f68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f72:	2302      	movs	r3, #2
 8007f74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bc80      	pop	{r7}
 8007f92:	4770      	bx	lr

08007f94 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007fb2:	88fa      	ldrh	r2, [r7, #6]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr

08007fc6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bc80      	pop	{r7}
 8007fea:	4770      	bx	lr

08007fec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d017      	beq.n	8008036 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	7c1b      	ldrb	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008018:	2101      	movs	r1, #1
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fca5 	bl	800996a <USBD_LL_PrepareReceive>
 8008020:	e007      	b.n	8008032 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	2101      	movs	r1, #1
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fc9c 	bl	800996a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	e000      	b.n	8008038 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008036:	2302      	movs	r3, #2
  }
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008054:	2302      	movs	r3, #2
 8008056:	e01a      	b.n	800808e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	79fa      	ldrb	r2, [r7, #7]
 8008084:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f001 fb0a 	bl	80096a0 <USBD_LL_Init>

  return USBD_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d006      	beq.n	80080b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
 80080b6:	e001      	b.n	80080bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80080b8:	2302      	movs	r3, #2
 80080ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 fb3f 	bl	8009754 <USBD_LL_Start>

  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008100:	2302      	movs	r3, #2
 8008102:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00c      	beq.n	8008128 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	4611      	mov	r1, r2
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	4611      	mov	r1, r2
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3

  return USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fed7 	bl	8008f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800818c:	f003 031f 	and.w	r3, r3, #31
 8008190:	2b02      	cmp	r3, #2
 8008192:	d016      	beq.n	80081c2 <USBD_LL_SetupStage+0x6a>
 8008194:	2b02      	cmp	r3, #2
 8008196:	d81c      	bhi.n	80081d2 <USBD_LL_SetupStage+0x7a>
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <USBD_LL_SetupStage+0x4a>
 800819c:	2b01      	cmp	r3, #1
 800819e:	d008      	beq.n	80081b2 <USBD_LL_SetupStage+0x5a>
 80081a0:	e017      	b.n	80081d2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f9ca 	bl	8008544 <USBD_StdDevReq>
      break;
 80081b0:	e01a      	b.n	80081e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa2c 	bl	8008618 <USBD_StdItfReq>
      break;
 80081c0:	e012      	b.n	80081e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa6c 	bl	80086a8 <USBD_StdEPReq>
      break;
 80081d0:	e00a      	b.n	80081e8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80081d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 fb17 	bl	8009814 <USBD_LL_StallEP>
      break;
 80081e6:	bf00      	nop
  }

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b086      	sub	sp, #24
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	460b      	mov	r3, r1
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008200:	7afb      	ldrb	r3, [r7, #11]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d14b      	bne.n	800829e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800820c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008214:	2b03      	cmp	r3, #3
 8008216:	d134      	bne.n	8008282 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	429a      	cmp	r2, r3
 8008222:	d919      	bls.n	8008258 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	1ad2      	subs	r2, r2, r3
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800823a:	429a      	cmp	r2, r3
 800823c:	d203      	bcs.n	8008246 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008242:	b29b      	uxth	r3, r3
 8008244:	e002      	b.n	800824c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800824a:	b29b      	uxth	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 ff56 	bl	8009102 <USBD_CtlContinueRx>
 8008256:	e038      	b.n	80082ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800826a:	2b03      	cmp	r3, #3
 800826c:	d105      	bne.n	800827a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 ff53 	bl	8009126 <USBD_CtlSendStatus>
 8008280:	e023      	b.n	80082ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008288:	2b05      	cmp	r3, #5
 800828a:	d11e      	bne.n	80082ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008294:	2100      	movs	r1, #0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f001 fabc 	bl	8009814 <USBD_LL_StallEP>
 800829c:	e015      	b.n	80082ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00d      	beq.n	80082c6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d108      	bne.n	80082c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	7afa      	ldrb	r2, [r7, #11]
 80082be:	4611      	mov	r1, r2
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	4798      	blx	r3
 80082c4:	e001      	b.n	80082ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082c6:	2302      	movs	r3, #2
 80082c8:	e000      	b.n	80082cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	460b      	mov	r3, r1
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80082e2:	7afb      	ldrb	r3, [r7, #11]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d17f      	bne.n	80083e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3314      	adds	r3, #20
 80082ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d15c      	bne.n	80083b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	429a      	cmp	r2, r3
 8008302:	d915      	bls.n	8008330 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	1ad2      	subs	r2, r2, r3
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	b29b      	uxth	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 fec0 	bl	80090a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008322:	2300      	movs	r3, #0
 8008324:	2200      	movs	r2, #0
 8008326:	2100      	movs	r1, #0
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f001 fb1e 	bl	800996a <USBD_LL_PrepareReceive>
 800832e:	e04e      	b.n	80083ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	6912      	ldr	r2, [r2, #16]
 8008338:	fbb3 f1f2 	udiv	r1, r3, r2
 800833c:	fb01 f202 	mul.w	r2, r1, r2
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d11c      	bne.n	8008380 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800834e:	429a      	cmp	r2, r3
 8008350:	d316      	bcc.n	8008380 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800835c:	429a      	cmp	r2, r3
 800835e:	d20f      	bcs.n	8008380 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008360:	2200      	movs	r2, #0
 8008362:	2100      	movs	r1, #0
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 fe9c 	bl	80090a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008372:	2300      	movs	r3, #0
 8008374:	2200      	movs	r2, #0
 8008376:	2100      	movs	r1, #0
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f001 faf6 	bl	800996a <USBD_LL_PrepareReceive>
 800837e:	e026      	b.n	80083ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008392:	2b03      	cmp	r3, #3
 8008394:	d105      	bne.n	80083a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083a2:	2180      	movs	r1, #128	; 0x80
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f001 fa35 	bl	8009814 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fece 	bl	800914c <USBD_CtlReceiveStatus>
 80083b0:	e00d      	b.n	80083ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d004      	beq.n	80083c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d103      	bne.n	80083ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80083c6:	2180      	movs	r1, #128	; 0x80
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f001 fa23 	bl	8009814 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d11d      	bne.n	8008414 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7ff fe81 	bl	80080e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80083e6:	e015      	b.n	8008414 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00d      	beq.n	8008410 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d108      	bne.n	8008410 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	7afa      	ldrb	r2, [r7, #11]
 8008408:	4611      	mov	r1, r2
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	4798      	blx	r3
 800840e:	e001      	b.n	8008414 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008410:	2302      	movs	r3, #2
 8008412:	e000      	b.n	8008416 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008426:	2340      	movs	r3, #64	; 0x40
 8008428:	2200      	movs	r2, #0
 800842a:	2100      	movs	r1, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 f9ac 	bl	800978a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2240      	movs	r2, #64	; 0x40
 800843e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	2200      	movs	r2, #0
 8008446:	2180      	movs	r1, #128	; 0x80
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f99e 	bl	800978a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2240      	movs	r2, #64	; 0x40
 8008458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	2b00      	cmp	r3, #0
 8008480:	d009      	beq.n	8008496 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6852      	ldr	r2, [r2, #4]
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	4611      	mov	r1, r2
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
  }

  return USBD_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr

080084be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2204      	movs	r2, #4
 80084d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr

080084e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d105      	bne.n	8008504 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr

08008510 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851e:	2b03      	cmp	r3, #3
 8008520:	d10b      	bne.n	800853a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800855a:	2b40      	cmp	r3, #64	; 0x40
 800855c:	d005      	beq.n	800856a <USBD_StdDevReq+0x26>
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d84f      	bhi.n	8008602 <USBD_StdDevReq+0xbe>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <USBD_StdDevReq+0x36>
 8008566:	2b20      	cmp	r3, #32
 8008568:	d14b      	bne.n	8008602 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
      break;
 8008578:	e048      	b.n	800860c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b09      	cmp	r3, #9
 8008580:	d839      	bhi.n	80085f6 <USBD_StdDevReq+0xb2>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <USBD_StdDevReq+0x44>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085d9 	.word	0x080085d9
 800858c:	080085ed 	.word	0x080085ed
 8008590:	080085f7 	.word	0x080085f7
 8008594:	080085e3 	.word	0x080085e3
 8008598:	080085f7 	.word	0x080085f7
 800859c:	080085bb 	.word	0x080085bb
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085f7 	.word	0x080085f7
 80085a8:	080085cf 	.word	0x080085cf
 80085ac:	080085c5 	.word	0x080085c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f9dc 	bl	8008970 <USBD_GetDescriptor>
          break;
 80085b8:	e022      	b.n	8008600 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fb3f 	bl	8008c40 <USBD_SetAddress>
          break;
 80085c2:	e01d      	b.n	8008600 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fb7e 	bl	8008cc8 <USBD_SetConfig>
          break;
 80085cc:	e018      	b.n	8008600 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fc07 	bl	8008de4 <USBD_GetConfig>
          break;
 80085d6:	e013      	b.n	8008600 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fc37 	bl	8008e4e <USBD_GetStatus>
          break;
 80085e0:	e00e      	b.n	8008600 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fc65 	bl	8008eb4 <USBD_SetFeature>
          break;
 80085ea:	e009      	b.n	8008600 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc74 	bl	8008edc <USBD_ClrFeature>
          break;
 80085f4:	e004      	b.n	8008600 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fccc 	bl	8008f96 <USBD_CtlError>
          break;
 80085fe:	bf00      	nop
      }
      break;
 8008600:	e004      	b.n	800860c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fcc6 	bl	8008f96 <USBD_CtlError>
      break;
 800860a:	bf00      	nop
  }

  return ret;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop

08008618 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800862e:	2b40      	cmp	r3, #64	; 0x40
 8008630:	d005      	beq.n	800863e <USBD_StdItfReq+0x26>
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d82e      	bhi.n	8008694 <USBD_StdItfReq+0x7c>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <USBD_StdItfReq+0x26>
 800863a:	2b20      	cmp	r3, #32
 800863c:	d12a      	bne.n	8008694 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008644:	3b01      	subs	r3, #1
 8008646:	2b02      	cmp	r3, #2
 8008648:	d81d      	bhi.n	8008686 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	889b      	ldrh	r3, [r3, #4]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b01      	cmp	r3, #1
 8008652:	d813      	bhi.n	800867c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	88db      	ldrh	r3, [r3, #6]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d110      	bne.n	8008690 <USBD_StdItfReq+0x78>
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10d      	bne.n	8008690 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fd56 	bl	8009126 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800867a:	e009      	b.n	8008690 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fc89 	bl	8008f96 <USBD_CtlError>
          break;
 8008684:	e004      	b.n	8008690 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fc84 	bl	8008f96 <USBD_CtlError>
          break;
 800868e:	e000      	b.n	8008692 <USBD_StdItfReq+0x7a>
          break;
 8008690:	bf00      	nop
      }
      break;
 8008692:	e004      	b.n	800869e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc7d 	bl	8008f96 <USBD_CtlError>
      break;
 800869c:	bf00      	nop
  }

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	889b      	ldrh	r3, [r3, #4]
 80086ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d007      	beq.n	80086d8 <USBD_StdEPReq+0x30>
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	f200 8146 	bhi.w	800895a <USBD_StdEPReq+0x2b2>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <USBD_StdEPReq+0x40>
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	f040 8141 	bne.w	800895a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
      break;
 80086e6:	e13d      	b.n	8008964 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d10a      	bne.n	800870a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	e12d      	b.n	8008966 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2b03      	cmp	r3, #3
 8008710:	d007      	beq.n	8008722 <USBD_StdEPReq+0x7a>
 8008712:	2b03      	cmp	r3, #3
 8008714:	f300 811b 	bgt.w	800894e <USBD_StdEPReq+0x2a6>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d072      	beq.n	8008802 <USBD_StdEPReq+0x15a>
 800871c:	2b01      	cmp	r3, #1
 800871e:	d03a      	beq.n	8008796 <USBD_StdEPReq+0xee>
 8008720:	e115      	b.n	800894e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008728:	2b02      	cmp	r3, #2
 800872a:	d002      	beq.n	8008732 <USBD_StdEPReq+0x8a>
 800872c:	2b03      	cmp	r3, #3
 800872e:	d015      	beq.n	800875c <USBD_StdEPReq+0xb4>
 8008730:	e02b      	b.n	800878a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <USBD_StdEPReq+0xaa>
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	2b80      	cmp	r3, #128	; 0x80
 800873c:	d009      	beq.n	8008752 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f866 	bl	8009814 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008748:	2180      	movs	r1, #128	; 0x80
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 f862 	bl	8009814 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008750:	e020      	b.n	8008794 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fc1e 	bl	8008f96 <USBD_CtlError>
              break;
 800875a:	e01b      	b.n	8008794 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	885b      	ldrh	r3, [r3, #2]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10e      	bne.n	8008782 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <USBD_StdEPReq+0xda>
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b80      	cmp	r3, #128	; 0x80
 800876e:	d008      	beq.n	8008782 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	88db      	ldrh	r3, [r3, #6]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008778:	7bbb      	ldrb	r3, [r7, #14]
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 f849 	bl	8009814 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fccf 	bl	8009126 <USBD_CtlSendStatus>

              break;
 8008788:	e004      	b.n	8008794 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fc02 	bl	8008f96 <USBD_CtlError>
              break;
 8008792:	bf00      	nop
          }
          break;
 8008794:	e0e0      	b.n	8008958 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879c:	2b02      	cmp	r3, #2
 800879e:	d002      	beq.n	80087a6 <USBD_StdEPReq+0xfe>
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d015      	beq.n	80087d0 <USBD_StdEPReq+0x128>
 80087a4:	e026      	b.n	80087f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00c      	beq.n	80087c6 <USBD_StdEPReq+0x11e>
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b80      	cmp	r3, #128	; 0x80
 80087b0:	d009      	beq.n	80087c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 f82c 	bl	8009814 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087bc:	2180      	movs	r1, #128	; 0x80
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 f828 	bl	8009814 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087c4:	e01c      	b.n	8008800 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fbe4 	bl	8008f96 <USBD_CtlError>
              break;
 80087ce:	e017      	b.n	8008800 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d112      	bne.n	80087fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 f833 	bl	8009852 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc9a 	bl	8009126 <USBD_CtlSendStatus>
              }
              break;
 80087f2:	e004      	b.n	80087fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fbcd 	bl	8008f96 <USBD_CtlError>
              break;
 80087fc:	e000      	b.n	8008800 <USBD_StdEPReq+0x158>
              break;
 80087fe:	bf00      	nop
          }
          break;
 8008800:	e0aa      	b.n	8008958 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	2b02      	cmp	r3, #2
 800880a:	d002      	beq.n	8008812 <USBD_StdEPReq+0x16a>
 800880c:	2b03      	cmp	r3, #3
 800880e:	d032      	beq.n	8008876 <USBD_StdEPReq+0x1ce>
 8008810:	e097      	b.n	8008942 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <USBD_StdEPReq+0x180>
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b80      	cmp	r3, #128	; 0x80
 800881c:	d004      	beq.n	8008828 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fbb8 	bl	8008f96 <USBD_CtlError>
                break;
 8008826:	e091      	b.n	800894c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800882c:	2b00      	cmp	r3, #0
 800882e:	da0b      	bge.n	8008848 <USBD_StdEPReq+0x1a0>
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	3310      	adds	r3, #16
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	3304      	adds	r3, #4
 8008846:	e00b      	b.n	8008860 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	4413      	add	r3, r2
 800885e:	3304      	adds	r3, #4
 8008860:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2202      	movs	r2, #2
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fbfb 	bl	800906a <USBD_CtlSendData>
              break;
 8008874:	e06a      	b.n	800894c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800887a:	2b00      	cmp	r3, #0
 800887c:	da11      	bge.n	80088a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	f003 020f 	and.w	r2, r3, #15
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	440b      	add	r3, r1
 8008890:	3318      	adds	r3, #24
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d117      	bne.n	80088c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fb7b 	bl	8008f96 <USBD_CtlError>
                  break;
 80088a0:	e054      	b.n	800894c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	f003 020f 	and.w	r2, r3, #15
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fb68 	bl	8008f96 <USBD_CtlError>
                  break;
 80088c6:	e041      	b.n	800894c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	da0b      	bge.n	80088e8 <USBD_StdEPReq+0x240>
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	3310      	adds	r3, #16
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	4413      	add	r3, r2
 80088e4:	3304      	adds	r3, #4
 80088e6:	e00b      	b.n	8008900 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	3304      	adds	r3, #4
 8008900:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <USBD_StdEPReq+0x266>
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2b80      	cmp	r3, #128	; 0x80
 800890c:	d103      	bne.n	8008916 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2200      	movs	r2, #0
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	e00e      	b.n	8008934 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 ffb8 	bl	8009890 <USBD_LL_IsStallEP>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2201      	movs	r2, #1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e002      	b.n	8008934 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2202      	movs	r2, #2
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fb95 	bl	800906a <USBD_CtlSendData>
              break;
 8008940:	e004      	b.n	800894c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fb26 	bl	8008f96 <USBD_CtlError>
              break;
 800894a:	bf00      	nop
          }
          break;
 800894c:	e004      	b.n	8008958 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fb20 	bl	8008f96 <USBD_CtlError>
          break;
 8008956:	bf00      	nop
      }
      break;
 8008958:	e004      	b.n	8008964 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fb1a 	bl	8008f96 <USBD_CtlError>
      break;
 8008962:	bf00      	nop
  }

  return ret;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	885b      	ldrh	r3, [r3, #2]
 800898a:	0a1b      	lsrs	r3, r3, #8
 800898c:	b29b      	uxth	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	2b06      	cmp	r3, #6
 8008992:	f200 8128 	bhi.w	8008be6 <USBD_GetDescriptor+0x276>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <USBD_GetDescriptor+0x2c>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089b9 	.word	0x080089b9
 80089a0:	080089d1 	.word	0x080089d1
 80089a4:	08008a11 	.word	0x08008a11
 80089a8:	08008be7 	.word	0x08008be7
 80089ac:	08008be7 	.word	0x08008be7
 80089b0:	08008b87 	.word	0x08008b87
 80089b4:	08008bb3 	.word	0x08008bb3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	7c12      	ldrb	r2, [r2, #16]
 80089c4:	f107 0108 	add.w	r1, r7, #8
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
 80089cc:	60f8      	str	r0, [r7, #12]
      break;
 80089ce:	e112      	b.n	8008bf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	7c1b      	ldrb	r3, [r3, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10d      	bne.n	80089f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e0:	f107 0208 	add.w	r2, r7, #8
 80089e4:	4610      	mov	r0, r2
 80089e6:	4798      	blx	r3
 80089e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	2202      	movs	r2, #2
 80089f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089f2:	e100      	b.n	8008bf6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	f107 0208 	add.w	r2, r7, #8
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	701a      	strb	r2, [r3, #0]
      break;
 8008a0e:	e0f2      	b.n	8008bf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	885b      	ldrh	r3, [r3, #2]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	f200 80ac 	bhi.w	8008b74 <USBD_GetDescriptor+0x204>
 8008a1c:	a201      	add	r2, pc, #4	; (adr r2, 8008a24 <USBD_GetDescriptor+0xb4>)
 8008a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a22:	bf00      	nop
 8008a24:	08008a3d 	.word	0x08008a3d
 8008a28:	08008a71 	.word	0x08008a71
 8008a2c:	08008aa5 	.word	0x08008aa5
 8008a30:	08008ad9 	.word	0x08008ad9
 8008a34:	08008b0d 	.word	0x08008b0d
 8008a38:	08008b41 	.word	0x08008b41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5e:	e091      	b.n	8008b84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa97 	bl	8008f96 <USBD_CtlError>
            err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6e:	e089      	b.n	8008b84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	7c12      	ldrb	r2, [r2, #16]
 8008a88:	f107 0108 	add.w	r1, r7, #8
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a92:	e077      	b.n	8008b84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa7d 	bl	8008f96 <USBD_CtlError>
            err++;
 8008a9c:	7afb      	ldrb	r3, [r7, #11]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8008aa2:	e06f      	b.n	8008b84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	7c12      	ldrb	r2, [r2, #16]
 8008abc:	f107 0108 	add.w	r1, r7, #8
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4798      	blx	r3
 8008ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac6:	e05d      	b.n	8008b84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa63 	bl	8008f96 <USBD_CtlError>
            err++;
 8008ad0:	7afb      	ldrb	r3, [r7, #11]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ad6:	e055      	b.n	8008b84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	7c12      	ldrb	r2, [r2, #16]
 8008af0:	f107 0108 	add.w	r1, r7, #8
 8008af4:	4610      	mov	r0, r2
 8008af6:	4798      	blx	r3
 8008af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008afa:	e043      	b.n	8008b84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa49 	bl	8008f96 <USBD_CtlError>
            err++;
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	3301      	adds	r3, #1
 8008b08:	72fb      	strb	r3, [r7, #11]
          break;
 8008b0a:	e03b      	b.n	8008b84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	7c12      	ldrb	r2, [r2, #16]
 8008b24:	f107 0108 	add.w	r1, r7, #8
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4798      	blx	r3
 8008b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b2e:	e029      	b.n	8008b84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa2f 	bl	8008f96 <USBD_CtlError>
            err++;
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b3e:	e021      	b.n	8008b84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	7c12      	ldrb	r2, [r2, #16]
 8008b58:	f107 0108 	add.w	r1, r7, #8
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b62:	e00f      	b.n	8008b84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fa15 	bl	8008f96 <USBD_CtlError>
            err++;
 8008b6c:	7afb      	ldrb	r3, [r7, #11]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	72fb      	strb	r3, [r7, #11]
          break;
 8008b72:	e007      	b.n	8008b84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa0d 	bl	8008f96 <USBD_CtlError>
          err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008b82:	e038      	b.n	8008bf6 <USBD_GetDescriptor+0x286>
 8008b84:	e037      	b.n	8008bf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	7c1b      	ldrb	r3, [r3, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d109      	bne.n	8008ba2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b96:	f107 0208 	add.w	r2, r7, #8
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	4798      	blx	r3
 8008b9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ba0:	e029      	b.n	8008bf6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f9f6 	bl	8008f96 <USBD_CtlError>
        err++;
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	3301      	adds	r3, #1
 8008bae:	72fb      	strb	r3, [r7, #11]
      break;
 8008bb0:	e021      	b.n	8008bf6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7c1b      	ldrb	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10d      	bne.n	8008bd6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc2:	f107 0208 	add.w	r2, r7, #8
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4798      	blx	r3
 8008bca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	2207      	movs	r2, #7
 8008bd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bd4:	e00f      	b.n	8008bf6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f9dc 	bl	8008f96 <USBD_CtlError>
        err++;
 8008bde:	7afb      	ldrb	r3, [r7, #11]
 8008be0:	3301      	adds	r3, #1
 8008be2:	72fb      	strb	r3, [r7, #11]
      break;
 8008be4:	e007      	b.n	8008bf6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f9d4 	bl	8008f96 <USBD_CtlError>
      err++;
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8008bf4:	bf00      	nop
  }

  if (err != 0U)
 8008bf6:	7afb      	ldrb	r3, [r7, #11]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d11c      	bne.n	8008c36 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008bfc:	893b      	ldrh	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d011      	beq.n	8008c26 <USBD_GetDescriptor+0x2b6>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	88db      	ldrh	r3, [r3, #6]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00d      	beq.n	8008c26 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	88da      	ldrh	r2, [r3, #6]
 8008c0e:	893b      	ldrh	r3, [r7, #8]
 8008c10:	4293      	cmp	r3, r2
 8008c12:	bf28      	it	cs
 8008c14:	4613      	movcs	r3, r2
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c1a:	893b      	ldrh	r3, [r7, #8]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68f9      	ldr	r1, [r7, #12]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa22 	bl	800906a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	88db      	ldrh	r3, [r3, #6]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d104      	bne.n	8008c38 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa79 	bl	8009126 <USBD_CtlSendStatus>
 8008c34:	e000      	b.n	8008c38 <USBD_GetDescriptor+0x2c8>
    return;
 8008c36:	bf00      	nop
    }
  }
}
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop

08008c40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	889b      	ldrh	r3, [r3, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d130      	bne.n	8008cb4 <USBD_SetAddress+0x74>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88db      	ldrh	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d12c      	bne.n	8008cb4 <USBD_SetAddress+0x74>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	885b      	ldrh	r3, [r3, #2]
 8008c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c60:	d828      	bhi.n	8008cb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	885b      	ldrh	r3, [r3, #2]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d104      	bne.n	8008c82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f98b 	bl	8008f96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c80:	e01d      	b.n	8008cbe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	7bfa      	ldrb	r2, [r7, #15]
 8008c86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fe29 	bl	80098e6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fa46 	bl	8009126 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca8:	e009      	b.n	8008cbe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb2:	e004      	b.n	8008cbe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f96d 	bl	8008f96 <USBD_CtlError>
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	885b      	ldrh	r3, [r3, #2]
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	4b41      	ldr	r3, [pc, #260]	; (8008de0 <USBD_SetConfig+0x118>)
 8008cda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cdc:	4b40      	ldr	r3, [pc, #256]	; (8008de0 <USBD_SetConfig+0x118>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d904      	bls.n	8008cee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f955 	bl	8008f96 <USBD_CtlError>
 8008cec:	e075      	b.n	8008dda <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d002      	beq.n	8008cfe <USBD_SetConfig+0x36>
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d023      	beq.n	8008d44 <USBD_SetConfig+0x7c>
 8008cfc:	e062      	b.n	8008dc4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008cfe:	4b38      	ldr	r3, [pc, #224]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d01a      	beq.n	8008d3c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d06:	4b36      	ldr	r3, [pc, #216]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2203      	movs	r2, #3
 8008d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d18:	4b31      	ldr	r3, [pc, #196]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7ff f9e8 	bl	80080f4 <USBD_SetClassConfig>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d104      	bne.n	8008d34 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f932 	bl	8008f96 <USBD_CtlError>
            return;
 8008d32:	e052      	b.n	8008dda <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f9f6 	bl	8009126 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d3a:	e04e      	b.n	8008dda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f9f2 	bl	8009126 <USBD_CtlSendStatus>
        break;
 8008d42:	e04a      	b.n	8008dda <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008d44:	4b26      	ldr	r3, [pc, #152]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d112      	bne.n	8008d72 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008d54:	4b22      	ldr	r3, [pc, #136]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008d5e:	4b20      	ldr	r3, [pc, #128]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff f9e4 	bl	8008132 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f9db 	bl	8009126 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d70:	e033      	b.n	8008dda <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008d72:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d01d      	beq.n	8008dbc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff f9d2 	bl	8008132 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008d8e:	4b14      	ldr	r3, [pc, #80]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d98:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <USBD_SetConfig+0x118>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff f9a8 	bl	80080f4 <USBD_SetClassConfig>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d104      	bne.n	8008db4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f8f2 	bl	8008f96 <USBD_CtlError>
            return;
 8008db2:	e012      	b.n	8008dda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f9b6 	bl	8009126 <USBD_CtlSendStatus>
        break;
 8008dba:	e00e      	b.n	8008dda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f9b2 	bl	8009126 <USBD_CtlSendStatus>
        break;
 8008dc2:	e00a      	b.n	8008dda <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8e5 	bl	8008f96 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <USBD_SetConfig+0x118>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff f9ad 	bl	8008132 <USBD_ClrClassConfig>
        break;
 8008dd8:	bf00      	nop
    }
  }
}
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	200009ac 	.word	0x200009ac

08008de4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	88db      	ldrh	r3, [r3, #6]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d004      	beq.n	8008e00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f8cc 	bl	8008f96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008dfe:	e022      	b.n	8008e46 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	dc02      	bgt.n	8008e10 <USBD_GetConfig+0x2c>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dc03      	bgt.n	8008e16 <USBD_GetConfig+0x32>
 8008e0e:	e015      	b.n	8008e3c <USBD_GetConfig+0x58>
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d00b      	beq.n	8008e2c <USBD_GetConfig+0x48>
 8008e14:	e012      	b.n	8008e3c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	2201      	movs	r2, #1
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f920 	bl	800906a <USBD_CtlSendData>
        break;
 8008e2a:	e00c      	b.n	8008e46 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	2201      	movs	r2, #1
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f918 	bl	800906a <USBD_CtlSendData>
        break;
 8008e3a:	e004      	b.n	8008e46 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f8a9 	bl	8008f96 <USBD_CtlError>
        break;
 8008e44:	bf00      	nop
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d81e      	bhi.n	8008ea2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	88db      	ldrh	r3, [r3, #6]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d004      	beq.n	8008e76 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f891 	bl	8008f96 <USBD_CtlError>
        break;
 8008e74:	e01a      	b.n	8008eac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f043 0202 	orr.w	r2, r3, #2
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	330c      	adds	r3, #12
 8008e96:	2202      	movs	r2, #2
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f8e5 	bl	800906a <USBD_CtlSendData>
      break;
 8008ea0:	e004      	b.n	8008eac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f876 	bl	8008f96 <USBD_CtlError>
      break;
 8008eaa:	bf00      	nop
  }
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d106      	bne.n	8008ed4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f929 	bl	8009126 <USBD_CtlSendStatus>
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eec:	3b01      	subs	r3, #1
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d80b      	bhi.n	8008f0a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	885b      	ldrh	r3, [r3, #2]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d10c      	bne.n	8008f14 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f90f 	bl	8009126 <USBD_CtlSendStatus>
      }
      break;
 8008f08:	e004      	b.n	8008f14 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f842 	bl	8008f96 <USBD_CtlError>
      break;
 8008f12:	e000      	b.n	8008f16 <USBD_ClrFeature+0x3a>
      break;
 8008f14:	bf00      	nop
  }
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	785a      	ldrb	r2, [r3, #1]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	3302      	adds	r3, #2
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	3303      	adds	r3, #3
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	3304      	adds	r3, #4
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	3305      	adds	r3, #5
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	4413      	add	r3, r2
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	3306      	adds	r3, #6
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	3307      	adds	r3, #7
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	4413      	add	r3, r2
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	80da      	strh	r2, [r3, #6]

}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr

08008f96 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b082      	sub	sp, #8
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008fa0:	2180      	movs	r1, #128	; 0x80
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fc36 	bl	8009814 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008fa8:	2100      	movs	r1, #0
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fc32 	bl	8009814 <USBD_LL_StallEP>
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d032      	beq.n	8009034 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f834 	bl	800903c <USBD_GetLen>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	75fa      	strb	r2, [r7, #23]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4413      	add	r3, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	7812      	ldrb	r2, [r2, #0]
 8008ff2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	75fa      	strb	r2, [r7, #23]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4413      	add	r3, r2
 8009000:	2203      	movs	r2, #3
 8009002:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009004:	e012      	b.n	800902c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	60fa      	str	r2, [r7, #12]
 800900c:	7dfa      	ldrb	r2, [r7, #23]
 800900e:	1c51      	adds	r1, r2, #1
 8009010:	75f9      	strb	r1, [r7, #23]
 8009012:	4611      	mov	r1, r2
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	440a      	add	r2, r1
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	75fa      	strb	r2, [r7, #23]
 8009022:	461a      	mov	r2, r3
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	4413      	add	r3, r2
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e8      	bne.n	8009006 <USBD_GetString+0x4e>
    }
  }
}
 8009034:	bf00      	nop
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009048:	e005      	b.n	8009056 <USBD_GetLen+0x1a>
  {
    len++;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	3301      	adds	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3301      	adds	r3, #1
 8009054:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f5      	bne.n	800904a <USBD_GetLen+0xe>
  }

  return len;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr

0800906a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	4613      	mov	r3, r2
 8009076:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2202      	movs	r2, #2
 800907c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009080:	88fa      	ldrh	r2, [r7, #6]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009086:	88fa      	ldrh	r2, [r7, #6]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	2100      	movs	r1, #0
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fc46 	bl	8009924 <USBD_LL_Transmit>

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	4613      	mov	r3, r2
 80090ae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	2100      	movs	r1, #0
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 fc34 	bl	8009924 <USBD_LL_Transmit>

  return USBD_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	4613      	mov	r3, r2
 80090d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2203      	movs	r2, #3
 80090d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090dc:	88fa      	ldrh	r2, [r7, #6]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80090e4:	88fa      	ldrh	r2, [r7, #6]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	2100      	movs	r1, #0
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 fc39 	bl	800996a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	4613      	mov	r3, r2
 800910e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	2100      	movs	r1, #0
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 fc27 	bl	800996a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2204      	movs	r2, #4
 8009132:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009136:	2300      	movs	r3, #0
 8009138:	2200      	movs	r2, #0
 800913a:	2100      	movs	r1, #0
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fbf1 	bl	8009924 <USBD_LL_Transmit>

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2205      	movs	r2, #5
 8009158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800915c:	2300      	movs	r3, #0
 800915e:	2200      	movs	r2, #0
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fc01 	bl	800996a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009178:	2200      	movs	r2, #0
 800917a:	4912      	ldr	r1, [pc, #72]	; (80091c4 <MX_USB_DEVICE_Init+0x50>)
 800917c:	4812      	ldr	r0, [pc, #72]	; (80091c8 <MX_USB_DEVICE_Init+0x54>)
 800917e:	f7fe ff5f 	bl	8008040 <USBD_Init>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009188:	f7f7 f97c 	bl	8000484 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800918c:	490f      	ldr	r1, [pc, #60]	; (80091cc <MX_USB_DEVICE_Init+0x58>)
 800918e:	480e      	ldr	r0, [pc, #56]	; (80091c8 <MX_USB_DEVICE_Init+0x54>)
 8009190:	f7fe ff81 	bl	8008096 <USBD_RegisterClass>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800919a:	f7f7 f973 	bl	8000484 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800919e:	490c      	ldr	r1, [pc, #48]	; (80091d0 <MX_USB_DEVICE_Init+0x5c>)
 80091a0:	4809      	ldr	r0, [pc, #36]	; (80091c8 <MX_USB_DEVICE_Init+0x54>)
 80091a2:	f7fe fee1 	bl	8007f68 <USBD_CDC_RegisterInterface>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091ac:	f7f7 f96a 	bl	8000484 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091b0:	4805      	ldr	r0, [pc, #20]	; (80091c8 <MX_USB_DEVICE_Init+0x54>)
 80091b2:	f7fe ff89 	bl	80080c8 <USBD_Start>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091bc:	f7f7 f962 	bl	8000484 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091c0:	bf00      	nop
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	2000015c 	.word	0x2000015c
 80091c8:	200009b0 	.word	0x200009b0
 80091cc:	20000048 	.word	0x20000048
 80091d0:	2000014c 	.word	0x2000014c

080091d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091d8:	2200      	movs	r2, #0
 80091da:	4905      	ldr	r1, [pc, #20]	; (80091f0 <CDC_Init_FS+0x1c>)
 80091dc:	4805      	ldr	r0, [pc, #20]	; (80091f4 <CDC_Init_FS+0x20>)
 80091de:	f7fe fed9 	bl	8007f94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091e2:	4905      	ldr	r1, [pc, #20]	; (80091f8 <CDC_Init_FS+0x24>)
 80091e4:	4803      	ldr	r0, [pc, #12]	; (80091f4 <CDC_Init_FS+0x20>)
 80091e6:	f7fe feee 	bl	8007fc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20001074 	.word	0x20001074
 80091f4:	200009b0 	.word	0x200009b0
 80091f8:	20000c74 	.word	0x20000c74

080091fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009200:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009202:	4618      	mov	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	bc80      	pop	{r7}
 8009208:	4770      	bx	lr
	...

0800920c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
 8009218:	4613      	mov	r3, r2
 800921a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	2b23      	cmp	r3, #35	; 0x23
 8009220:	d84a      	bhi.n	80092b8 <CDC_Control_FS+0xac>
 8009222:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <CDC_Control_FS+0x1c>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	080092b9 	.word	0x080092b9
 800922c:	080092b9 	.word	0x080092b9
 8009230:	080092b9 	.word	0x080092b9
 8009234:	080092b9 	.word	0x080092b9
 8009238:	080092b9 	.word	0x080092b9
 800923c:	080092b9 	.word	0x080092b9
 8009240:	080092b9 	.word	0x080092b9
 8009244:	080092b9 	.word	0x080092b9
 8009248:	080092b9 	.word	0x080092b9
 800924c:	080092b9 	.word	0x080092b9
 8009250:	080092b9 	.word	0x080092b9
 8009254:	080092b9 	.word	0x080092b9
 8009258:	080092b9 	.word	0x080092b9
 800925c:	080092b9 	.word	0x080092b9
 8009260:	080092b9 	.word	0x080092b9
 8009264:	080092b9 	.word	0x080092b9
 8009268:	080092b9 	.word	0x080092b9
 800926c:	080092b9 	.word	0x080092b9
 8009270:	080092b9 	.word	0x080092b9
 8009274:	080092b9 	.word	0x080092b9
 8009278:	080092b9 	.word	0x080092b9
 800927c:	080092b9 	.word	0x080092b9
 8009280:	080092b9 	.word	0x080092b9
 8009284:	080092b9 	.word	0x080092b9
 8009288:	080092b9 	.word	0x080092b9
 800928c:	080092b9 	.word	0x080092b9
 8009290:	080092b9 	.word	0x080092b9
 8009294:	080092b9 	.word	0x080092b9
 8009298:	080092b9 	.word	0x080092b9
 800929c:	080092b9 	.word	0x080092b9
 80092a0:	080092b9 	.word	0x080092b9
 80092a4:	080092b9 	.word	0x080092b9
 80092a8:	080092b9 	.word	0x080092b9
 80092ac:	080092b9 	.word	0x080092b9
 80092b0:	080092b9 	.word	0x080092b9
 80092b4:	080092b9 	.word	0x080092b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092b8:	bf00      	nop
  }

  return (USBD_OK);
 80092ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bc80      	pop	{r7}
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop

080092c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	4805      	ldr	r0, [pc, #20]	; (80092ec <CDC_Receive_FS+0x24>)
 80092d6:	f7fe fe76 	bl	8007fc6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092da:	4804      	ldr	r0, [pc, #16]	; (80092ec <CDC_Receive_FS+0x24>)
 80092dc:	f7fe fe86 	bl	8007fec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	200009b0 	.word	0x200009b0

080092f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2212      	movs	r2, #18
 8009300:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009302:	4b03      	ldr	r3, [pc, #12]	; (8009310 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009304:	4618      	mov	r0, r3
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000178 	.word	0x20000178

08009314 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	6039      	str	r1, [r7, #0]
 800931e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2204      	movs	r2, #4
 8009324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009326:	4b03      	ldr	r3, [pc, #12]	; (8009334 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009328:	4618      	mov	r0, r3
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	2000018c 	.word	0x2000018c

08009338 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d105      	bne.n	8009356 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	4907      	ldr	r1, [pc, #28]	; (800936c <USBD_FS_ProductStrDescriptor+0x34>)
 800934e:	4808      	ldr	r0, [pc, #32]	; (8009370 <USBD_FS_ProductStrDescriptor+0x38>)
 8009350:	f7ff fe32 	bl	8008fb8 <USBD_GetString>
 8009354:	e004      	b.n	8009360 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4904      	ldr	r1, [pc, #16]	; (800936c <USBD_FS_ProductStrDescriptor+0x34>)
 800935a:	4805      	ldr	r0, [pc, #20]	; (8009370 <USBD_FS_ProductStrDescriptor+0x38>)
 800935c:	f7ff fe2c 	bl	8008fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009360:	4b02      	ldr	r3, [pc, #8]	; (800936c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20001474 	.word	0x20001474
 8009370:	08009afc 	.word	0x08009afc

08009374 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	4904      	ldr	r1, [pc, #16]	; (8009394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009384:	4804      	ldr	r0, [pc, #16]	; (8009398 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009386:	f7ff fe17 	bl	8008fb8 <USBD_GetString>
  return USBD_StrDesc;
 800938a:	4b02      	ldr	r3, [pc, #8]	; (8009394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20001474 	.word	0x20001474
 8009398:	08009b14 	.word	0x08009b14

0800939c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	6039      	str	r1, [r7, #0]
 80093a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	221a      	movs	r2, #26
 80093ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093ae:	f000 f843 	bl	8009438 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093b2:	4b02      	ldr	r3, [pc, #8]	; (80093bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20000190 	.word	0x20000190

080093c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	6039      	str	r1, [r7, #0]
 80093ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d105      	bne.n	80093de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	4907      	ldr	r1, [pc, #28]	; (80093f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093d6:	4808      	ldr	r0, [pc, #32]	; (80093f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093d8:	f7ff fdee 	bl	8008fb8 <USBD_GetString>
 80093dc:	e004      	b.n	80093e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	4904      	ldr	r1, [pc, #16]	; (80093f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093e2:	4805      	ldr	r0, [pc, #20]	; (80093f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093e4:	f7ff fde8 	bl	8008fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e8:	4b02      	ldr	r3, [pc, #8]	; (80093f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20001474 	.word	0x20001474
 80093f8:	08009b28 	.word	0x08009b28

080093fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	6039      	str	r1, [r7, #0]
 8009406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d105      	bne.n	800941a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	4907      	ldr	r1, [pc, #28]	; (8009430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009412:	4808      	ldr	r0, [pc, #32]	; (8009434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009414:	f7ff fdd0 	bl	8008fb8 <USBD_GetString>
 8009418:	e004      	b.n	8009424 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4904      	ldr	r1, [pc, #16]	; (8009430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800941e:	4805      	ldr	r0, [pc, #20]	; (8009434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009420:	f7ff fdca 	bl	8008fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009424:	4b02      	ldr	r3, [pc, #8]	; (8009430 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20001474 	.word	0x20001474
 8009434:	08009b34 	.word	0x08009b34

08009438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800943e:	4b0f      	ldr	r3, [pc, #60]	; (800947c <Get_SerialNum+0x44>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009444:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <Get_SerialNum+0x48>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800944a:	4b0e      	ldr	r3, [pc, #56]	; (8009484 <Get_SerialNum+0x4c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4413      	add	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d009      	beq.n	8009472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800945e:	2208      	movs	r2, #8
 8009460:	4909      	ldr	r1, [pc, #36]	; (8009488 <Get_SerialNum+0x50>)
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 f814 	bl	8009490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009468:	2204      	movs	r2, #4
 800946a:	4908      	ldr	r1, [pc, #32]	; (800948c <Get_SerialNum+0x54>)
 800946c:	68b8      	ldr	r0, [r7, #8]
 800946e:	f000 f80f 	bl	8009490 <IntToUnicode>
  }
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	1ffff7e8 	.word	0x1ffff7e8
 8009480:	1ffff7ec 	.word	0x1ffff7ec
 8009484:	1ffff7f0 	.word	0x1ffff7f0
 8009488:	20000192 	.word	0x20000192
 800948c:	200001a2 	.word	0x200001a2

08009490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4613      	mov	r3, r2
 800949c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	75fb      	strb	r3, [r7, #23]
 80094a6:	e027      	b.n	80094f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	0f1b      	lsrs	r3, r3, #28
 80094ac:	2b09      	cmp	r3, #9
 80094ae:	d80b      	bhi.n	80094c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	0f1b      	lsrs	r3, r3, #28
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	4619      	mov	r1, r3
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	440b      	add	r3, r1
 80094c0:	3230      	adds	r2, #48	; 0x30
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	e00a      	b.n	80094de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	0f1b      	lsrs	r3, r3, #28
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	4619      	mov	r1, r3
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	440b      	add	r3, r1
 80094d8:	3237      	adds	r2, #55	; 0x37
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	011b      	lsls	r3, r3, #4
 80094e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	3301      	adds	r3, #1
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	4413      	add	r3, r2
 80094ee:	2200      	movs	r2, #0
 80094f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	3301      	adds	r3, #1
 80094f6:	75fb      	strb	r3, [r7, #23]
 80094f8:	7dfa      	ldrb	r2, [r7, #23]
 80094fa:	79fb      	ldrb	r3, [r7, #7]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d3d3      	bcc.n	80094a8 <IntToUnicode+0x18>
  }
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	bc80      	pop	{r7}
 800950a:	4770      	bx	lr

0800950c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a11      	ldr	r2, [pc, #68]	; (8009560 <HAL_PCD_MspInit+0x54>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d11b      	bne.n	8009556 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800951e:	4b11      	ldr	r3, [pc, #68]	; (8009564 <HAL_PCD_MspInit+0x58>)
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	4a10      	ldr	r2, [pc, #64]	; (8009564 <HAL_PCD_MspInit+0x58>)
 8009524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009528:	61d3      	str	r3, [r2, #28]
 800952a:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <HAL_PCD_MspInit+0x58>)
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8009536:	2200      	movs	r2, #0
 8009538:	2100      	movs	r1, #0
 800953a:	2013      	movs	r0, #19
 800953c:	f7f7 fb09 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8009540:	2013      	movs	r0, #19
 8009542:	f7f7 fb22 	bl	8000b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009546:	2200      	movs	r2, #0
 8009548:	2100      	movs	r1, #0
 800954a:	2014      	movs	r0, #20
 800954c:	f7f7 fb01 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009550:	2014      	movs	r0, #20
 8009552:	f7f7 fb1a 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	40005c00 	.word	0x40005c00
 8009564:	40021000 	.word	0x40021000

08009568 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800957c:	4619      	mov	r1, r3
 800957e:	4610      	mov	r0, r2
 8009580:	f7fe fdea 	bl	8008158 <USBD_LL_SetupStage>
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800959e:	78fa      	ldrb	r2, [r7, #3]
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	440b      	add	r3, r1
 80095ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	78fb      	ldrb	r3, [r7, #3]
 80095b4:	4619      	mov	r1, r3
 80095b6:	f7fe fe1c 	bl	80081f2 <USBD_LL_DataOutStage>
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	440b      	add	r3, r1
 80095e2:	3324      	adds	r3, #36	; 0x24
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	4619      	mov	r1, r3
 80095ea:	f7fe fe73 	bl	80082d4 <USBD_LL_DataInStage>
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe ff83 	bl	8008510 <USBD_LL_SOF>
}
 800960a:	bf00      	nop
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800961a:	2301      	movs	r3, #1
 800961c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	799b      	ldrb	r3, [r3, #6]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d001      	beq.n	800962a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009626:	f7f6 ff2d 	bl	8000484 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009630:	7bfa      	ldrb	r2, [r7, #15]
 8009632:	4611      	mov	r1, r2
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe ff33 	bl	80084a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe feec 	bl	800841e <USBD_LL_Reset>
}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe ff2d 	bl	80084be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	7a9b      	ldrb	r3, [r3, #10]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <HAL_PCD_SuspendCallback+0x30>)
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	4a03      	ldr	r2, [pc, #12]	; (8009680 <HAL_PCD_SuspendCallback+0x30>)
 8009672:	f043 0306 	orr.w	r3, r3, #6
 8009676:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	e000ed00 	.word	0xe000ed00

08009684 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe ff27 	bl	80084e6 <USBD_LL_Resume>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80096a8:	4a28      	ldr	r2, [pc, #160]	; (800974c <USBD_LL_Init+0xac>)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a26      	ldr	r2, [pc, #152]	; (800974c <USBD_LL_Init+0xac>)
 80096b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80096b8:	4b24      	ldr	r3, [pc, #144]	; (800974c <USBD_LL_Init+0xac>)
 80096ba:	4a25      	ldr	r2, [pc, #148]	; (8009750 <USBD_LL_Init+0xb0>)
 80096bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096be:	4b23      	ldr	r3, [pc, #140]	; (800974c <USBD_LL_Init+0xac>)
 80096c0:	2208      	movs	r2, #8
 80096c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096c4:	4b21      	ldr	r3, [pc, #132]	; (800974c <USBD_LL_Init+0xac>)
 80096c6:	2202      	movs	r2, #2
 80096c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096ca:	4b20      	ldr	r3, [pc, #128]	; (800974c <USBD_LL_Init+0xac>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096d0:	4b1e      	ldr	r3, [pc, #120]	; (800974c <USBD_LL_Init+0xac>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096d6:	4b1d      	ldr	r3, [pc, #116]	; (800974c <USBD_LL_Init+0xac>)
 80096d8:	2200      	movs	r2, #0
 80096da:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096dc:	481b      	ldr	r0, [pc, #108]	; (800974c <USBD_LL_Init+0xac>)
 80096de:	f7f7 fe95 	bl	800140c <HAL_PCD_Init>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80096e8:	f7f6 fecc 	bl	8000484 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096f2:	2318      	movs	r3, #24
 80096f4:	2200      	movs	r2, #0
 80096f6:	2100      	movs	r1, #0
 80096f8:	f7f9 fba7 	bl	8002e4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009702:	2358      	movs	r3, #88	; 0x58
 8009704:	2200      	movs	r2, #0
 8009706:	2180      	movs	r1, #128	; 0x80
 8009708:	f7f9 fb9f 	bl	8002e4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009712:	23c0      	movs	r3, #192	; 0xc0
 8009714:	2200      	movs	r2, #0
 8009716:	2181      	movs	r1, #129	; 0x81
 8009718:	f7f9 fb97 	bl	8002e4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009722:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009726:	2200      	movs	r2, #0
 8009728:	2101      	movs	r1, #1
 800972a:	f7f9 fb8e 	bl	8002e4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009738:	2200      	movs	r2, #0
 800973a:	2182      	movs	r1, #130	; 0x82
 800973c:	f7f9 fb85 	bl	8002e4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20001674 	.word	0x20001674
 8009750:	40005c00 	.word	0x40005c00

08009754 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800976a:	4618      	mov	r0, r3
 800976c:	f7f7 ff44 	bl	80015f8 <HAL_PCD_Start>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f94e 	bl	8009a18 <USBD_Get_USB_Status>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009780:	7bbb      	ldrb	r3, [r7, #14]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	4608      	mov	r0, r1
 8009794:	4611      	mov	r1, r2
 8009796:	461a      	mov	r2, r3
 8009798:	4603      	mov	r3, r0
 800979a:	70fb      	strb	r3, [r7, #3]
 800979c:	460b      	mov	r3, r1
 800979e:	70bb      	strb	r3, [r7, #2]
 80097a0:	4613      	mov	r3, r2
 80097a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097b2:	78bb      	ldrb	r3, [r7, #2]
 80097b4:	883a      	ldrh	r2, [r7, #0]
 80097b6:	78f9      	ldrb	r1, [r7, #3]
 80097b8:	f7f8 f898 	bl	80018ec <HAL_PCD_EP_Open>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f928 	bl	8009a18 <USBD_Get_USB_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	460b      	mov	r3, r1
 80097e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	4611      	mov	r1, r2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7f8 f8d6 	bl	80019a6 <HAL_PCD_EP_Close>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	4618      	mov	r0, r3
 8009802:	f000 f909 	bl	8009a18 <USBD_Get_USB_Status>
 8009806:	4603      	mov	r3, r0
 8009808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980a:	7bbb      	ldrb	r3, [r7, #14]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800982e:	78fa      	ldrb	r2, [r7, #3]
 8009830:	4611      	mov	r1, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f7f8 f97e 	bl	8001b34 <HAL_PCD_EP_SetStall>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f8ea 	bl	8009a18 <USBD_Get_USB_Status>
 8009844:	4603      	mov	r3, r0
 8009846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009848:	7bbb      	ldrb	r3, [r7, #14]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	4611      	mov	r1, r2
 8009870:	4618      	mov	r0, r3
 8009872:	f7f8 f9bf 	bl	8001bf4 <HAL_PCD_EP_ClrStall>
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987a:	7bfb      	ldrb	r3, [r7, #15]
 800987c:	4618      	mov	r0, r3
 800987e:	f000 f8cb 	bl	8009a18 <USBD_Get_USB_Status>
 8009882:	4603      	mov	r3, r0
 8009884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009886:	7bbb      	ldrb	r3, [r7, #14]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da0b      	bge.n	80098c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	4613      	mov	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	440b      	add	r3, r1
 80098be:	3312      	adds	r3, #18
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	e00b      	b.n	80098dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	440b      	add	r3, r1
 80098d6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 80098da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bc80      	pop	{r7}
 80098e4:	4770      	bx	lr

080098e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	4611      	mov	r1, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f7f7 ffcd 	bl	80018a4 <HAL_PCD_SetAddress>
 800990a:	4603      	mov	r3, r0
 800990c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990e:	7bfb      	ldrb	r3, [r7, #15]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 f881 	bl	8009a18 <USBD_Get_USB_Status>
 8009916:	4603      	mov	r3, r0
 8009918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800991a:	7bbb      	ldrb	r3, [r7, #14]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	461a      	mov	r2, r3
 8009930:	460b      	mov	r3, r1
 8009932:	72fb      	strb	r3, [r7, #11]
 8009934:	4613      	mov	r3, r2
 8009936:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009946:	893b      	ldrh	r3, [r7, #8]
 8009948:	7af9      	ldrb	r1, [r7, #11]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	f7f8 f8bb 	bl	8001ac6 <HAL_PCD_EP_Transmit>
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	4618      	mov	r0, r3
 8009958:	f000 f85e 	bl	8009a18 <USBD_Get_USB_Status>
 800995c:	4603      	mov	r3, r0
 800995e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009960:	7dbb      	ldrb	r3, [r7, #22]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	461a      	mov	r2, r3
 8009976:	460b      	mov	r3, r1
 8009978:	72fb      	strb	r3, [r7, #11]
 800997a:	4613      	mov	r3, r2
 800997c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800998c:	893b      	ldrh	r3, [r7, #8]
 800998e:	7af9      	ldrb	r1, [r7, #11]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	f7f8 f850 	bl	8001a36 <HAL_PCD_EP_Receive>
 8009996:	4603      	mov	r3, r0
 8009998:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 f83b 	bl	8009a18 <USBD_Get_USB_Status>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	4611      	mov	r1, r2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7f8 f866 	bl	8001a98 <HAL_PCD_EP_GetRxCount>
 80099cc:	4603      	mov	r3, r0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099e0:	4b02      	ldr	r3, [pc, #8]	; (80099ec <USBD_static_malloc+0x14>)
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bc80      	pop	{r7}
 80099ea:	4770      	bx	lr
 80099ec:	2000194c 	.word	0x2000194c

080099f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]

}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr

08009a02 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bc80      	pop	{r7}
 8009a16:	4770      	bx	lr

08009a18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d817      	bhi.n	8009a5c <USBD_Get_USB_Status+0x44>
 8009a2c:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <USBD_Get_USB_Status+0x1c>)
 8009a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a32:	bf00      	nop
 8009a34:	08009a45 	.word	0x08009a45
 8009a38:	08009a4b 	.word	0x08009a4b
 8009a3c:	08009a51 	.word	0x08009a51
 8009a40:	08009a57 	.word	0x08009a57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
    break;
 8009a48:	e00b      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4e:	e008      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a50:	2301      	movs	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]
    break;
 8009a54:	e005      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a56:	2302      	movs	r3, #2
 8009a58:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5a:	e002      	b.n	8009a62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a60:	bf00      	nop
  }
  return usb_status;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bc80      	pop	{r7}
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop

08009a70 <__libc_init_array>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	2600      	movs	r6, #0
 8009a74:	4d0c      	ldr	r5, [pc, #48]	; (8009aa8 <__libc_init_array+0x38>)
 8009a76:	4c0d      	ldr	r4, [pc, #52]	; (8009aac <__libc_init_array+0x3c>)
 8009a78:	1b64      	subs	r4, r4, r5
 8009a7a:	10a4      	asrs	r4, r4, #2
 8009a7c:	42a6      	cmp	r6, r4
 8009a7e:	d109      	bne.n	8009a94 <__libc_init_array+0x24>
 8009a80:	f000 f830 	bl	8009ae4 <_init>
 8009a84:	2600      	movs	r6, #0
 8009a86:	4d0a      	ldr	r5, [pc, #40]	; (8009ab0 <__libc_init_array+0x40>)
 8009a88:	4c0a      	ldr	r4, [pc, #40]	; (8009ab4 <__libc_init_array+0x44>)
 8009a8a:	1b64      	subs	r4, r4, r5
 8009a8c:	10a4      	asrs	r4, r4, #2
 8009a8e:	42a6      	cmp	r6, r4
 8009a90:	d105      	bne.n	8009a9e <__libc_init_array+0x2e>
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a98:	4798      	blx	r3
 8009a9a:	3601      	adds	r6, #1
 8009a9c:	e7ee      	b.n	8009a7c <__libc_init_array+0xc>
 8009a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa2:	4798      	blx	r3
 8009aa4:	3601      	adds	r6, #1
 8009aa6:	e7f2      	b.n	8009a8e <__libc_init_array+0x1e>
 8009aa8:	08009b70 	.word	0x08009b70
 8009aac:	08009b70 	.word	0x08009b70
 8009ab0:	08009b70 	.word	0x08009b70
 8009ab4:	08009b74 	.word	0x08009b74

08009ab8 <memcpy>:
 8009ab8:	440a      	add	r2, r1
 8009aba:	4291      	cmp	r1, r2
 8009abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ac0:	d100      	bne.n	8009ac4 <memcpy+0xc>
 8009ac2:	4770      	bx	lr
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aca:	4291      	cmp	r1, r2
 8009acc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ad0:	d1f9      	bne.n	8009ac6 <memcpy+0xe>
 8009ad2:	bd10      	pop	{r4, pc}

08009ad4 <memset>:
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	4402      	add	r2, r0
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d100      	bne.n	8009ade <memset+0xa>
 8009adc:	4770      	bx	lr
 8009ade:	f803 1b01 	strb.w	r1, [r3], #1
 8009ae2:	e7f9      	b.n	8009ad8 <memset+0x4>

08009ae4 <_init>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr

08009af0 <_fini>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	bf00      	nop
 8009af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af6:	bc08      	pop	{r3}
 8009af8:	469e      	mov	lr, r3
 8009afa:	4770      	bx	lr
